/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ScriptLazyImport = createFileRoute('/script')()
const PredicateLazyImport = createFileRoute('/predicate')()
const FaucetLazyImport = createFileRoute('/faucet')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const ScriptLazyRoute = ScriptLazyImport.update({
  path: '/script',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/script.lazy').then((d) => d.Route))

const PredicateLazyRoute = PredicateLazyImport.update({
  path: '/predicate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/predicate.lazy').then((d) => d.Route))

const FaucetLazyRoute = FaucetLazyImport.update({
  path: '/faucet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/faucet.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/faucet': {
      id: '/faucet'
      path: '/faucet'
      fullPath: '/faucet'
      preLoaderRoute: typeof FaucetLazyImport
      parentRoute: typeof rootRoute
    }
    '/predicate': {
      id: '/predicate'
      path: '/predicate'
      fullPath: '/predicate'
      preLoaderRoute: typeof PredicateLazyImport
      parentRoute: typeof rootRoute
    }
    '/script': {
      id: '/script'
      path: '/script'
      fullPath: '/script'
      preLoaderRoute: typeof ScriptLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/faucet': typeof FaucetLazyRoute
  '/predicate': typeof PredicateLazyRoute
  '/script': typeof ScriptLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/faucet': typeof FaucetLazyRoute
  '/predicate': typeof PredicateLazyRoute
  '/script': typeof ScriptLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/faucet': typeof FaucetLazyRoute
  '/predicate': typeof PredicateLazyRoute
  '/script': typeof ScriptLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/faucet' | '/predicate' | '/script'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/faucet' | '/predicate' | '/script'
  id: '__root__' | '/' | '/faucet' | '/predicate' | '/script'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  FaucetLazyRoute: typeof FaucetLazyRoute
  PredicateLazyRoute: typeof PredicateLazyRoute
  ScriptLazyRoute: typeof ScriptLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  FaucetLazyRoute: FaucetLazyRoute,
  PredicateLazyRoute: PredicateLazyRoute,
  ScriptLazyRoute: ScriptLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/faucet",
        "/predicate",
        "/script"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/faucet": {
      "filePath": "faucet.lazy.tsx"
    },
    "/predicate": {
      "filePath": "predicate.lazy.tsx"
    },
    "/script": {
      "filePath": "script.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
