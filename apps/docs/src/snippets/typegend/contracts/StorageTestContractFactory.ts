/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { StorageTestContract } from "./StorageTestContract";

const bytecode = decompressBytecode("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");

export class StorageTestContractFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, StorageTestContract.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: StorageTestContract.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<StorageTestContract>> {
    const factory = new StorageTestContractFactory(wallet);
    return factory.deploy(options);
  }
}
