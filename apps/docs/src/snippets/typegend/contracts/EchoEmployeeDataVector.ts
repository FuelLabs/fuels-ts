/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Vec } from "./common";

export type EmployeeDataInput = { name: string, age: BigNumberish, salary: BigNumberish, idHash: string, ratings: [BigNumberish, BigNumberish, BigNumberish], isActive: boolean };
export type EmployeeDataOutput = { name: string, age: number, salary: BN, idHash: string, ratings: [number, number, number], isActive: boolean };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "struct employee-data::EmployeeData",
      "concreteTypeId": "87741e2ee87c4f747111dd3f326661e8e7ad0e876d955899a98d35802365555f",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::vec::Vec<struct employee-data::EmployeeData>",
      "concreteTypeId": "ad3dcb2ff0ceec805416c4e955b3326d9f06daac38ba8b898a7d31f71659a463",
      "metadataTypeId": 8,
      "typeArguments": [
        "87741e2ee87c4f747111dd3f326661e8e7ad0e876d955899a98d35802365555f"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 3]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 10
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "bool",
      "metadataTypeId": 2
    },
    {
      "type": "generic T",
      "metadataTypeId": 3
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 4
    },
    {
      "type": "str[8]",
      "metadataTypeId": 5
    },
    {
      "type": "struct employee-data::EmployeeData",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "name",
          "typeId": 5
        },
        {
          "name": "age",
          "typeId": 10
        },
        {
          "name": "salary",
          "typeId": 9
        },
        {
          "name": "idHash",
          "typeId": 1
        },
        {
          "name": "ratings",
          "typeId": 0
        },
        {
          "name": "isActive",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "ptr",
          "typeId": 4
        },
        {
          "name": "cap",
          "typeId": 9
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "buf",
          "typeId": 7,
          "typeArguments": [
            {
              "name": "",
              "typeId": 3
            }
          ]
        },
        {
          "name": "len",
          "typeId": 9
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 9
    },
    {
      "type": "u8",
      "metadataTypeId": 10
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "employee_data_vector",
          "concreteTypeId": "ad3dcb2ff0ceec805416c4e955b3326d9f06daac38ba8b898a7d31f71659a463"
        }
      ],
      "name": "echo_last_employee_data",
      "output": "87741e2ee87c4f747111dd3f326661e8e7ad0e876d955899a98d35802365555f",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class EchoEmployeeDataVectorInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    echo_last_employee_data: FunctionFragment;
  };
}

export class EchoEmployeeDataVector extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: EchoEmployeeDataVectorInterface;
  declare functions: {
    echo_last_employee_data: InvokeFunction<[employee_data_vector: Vec<EmployeeDataInput>], EmployeeDataOutput>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
