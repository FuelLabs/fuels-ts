/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { LogValues } from "./LogValues";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VWTWwbRRR+jjetRYGMqIOsSav60FbLrwxNyj/dlW1s4xhPaCRSUWdb2pKUFtVyaVQEBx845ITaqoEccwDRA4d1YqSc0MIpJ/ARkCocRFEi1VKEWimhh/DN7DreOE4kRKTI8/PmvW++9+Z7y1di9BFRF6m/PQuFdSfA1tflGvG7gq5TYKkQX9nFTHJ44hSV0l2CJcNlvswounqERh7Uu8SDugb7P3mqRlaDxTy79DZ2v3l2/SJVmemwf5tnayTytiP3+J0o8cVYx1ilQWJ6I+zAzy01TlUxtuvNcQfff8tz8D2O+I9YjeijsGelNOyT/WWRrUyqsxn4xBh2I1aD9pQMegi/D4u4bZcE9s0B+KiQGud6iS9vwbfkxqkw16a7k83vPF+jvcmwszeJew4STSRoH+4SUxiSBzvh/8Pza+zg91ceVzZR1+ZQJxtHcvxELvzYxCB14X6fHDWIxJkK8lVut/2YWzUqmGUCV1FwFdWTWlnEKwtqbIbLcq+UoCgzNcM6DT9jlQVwVZO+sK7xO7jfIrX7vaxwpmzD5V/5nFdj+MT5leaYL285W1ZnL9gC/kP6ec3ogPsb139lGn4CfWmtzDLh8miGUJtyHt40B+ddfZn+jTU+wgi8BB83z9KEQVFgmwbWq1aj2CMyLAT7qJ656WCsYxzSM185Isli8BWUdymk7B7UkNiwy1eKyEdIz31N4njlamkYdkPdwN2qcX4bgTbf4QeOvBzCf4f7Xdp0v8zZDezsxCnjCtGzU0TBL0LuO+bxGeKpOvKI+X38rzGaxt6XsHlzlQi2B7bYwlchE6VCDhwBO8sNkGUC533gbZ0/4J0/1jx/nSjm+rhGPFsmnq/jznhnw7g/7oy3F8QYbzdpYD2qxse/MwpDwJ5MGJapuGd6tqpi3ZD+1mLNeMe8eLt98VgTs6qZhob6sDfuivPMh3f3fzgf+J/nd4rf04nvkx7fLBcDD1u47mk/i9jpVmyNDqexni5KjYtA34JyDb+adZe6gS2iN6TO2VJjIuDXUb8mtMbFme4Qy5/X8VZekdM83p/AeegQ8iV9E96tfA8RPV51Cnm7W5jEkGPkPBYSOSOkaiDXbcAuonTOTEgM8v0DA5MYxvlatC3XwfUWBm1pU22dKRK3gOVdaK18ayeg3WN2WunCuYOGSM0V23UUbyOv+ofiA1qTmq2pcaoquZG4IqoHpFQ/iEgtLrxjP1c4bj+Pd30EtiH51nqhrdDPAN7ibqUfOdxFvpOhATosiPT9wwYfLqKmhw0rCV2MV5ashnjNahivIyfHoCdSL+Bfat+s1EHkQuKpFlvr1SLmskd58znoqtSMzZqIO5339FTexdPTOelfaSh6eBewv1/I2mP9Ae1t7E226yp8THk+6j5cSy1c9mprvTLTXAcv/cj1QCFuH1V9IKkZveBvArqkuEm72irzw3IHncPodfr+BHGBOs3OEmoCGnnOYGbCHZuHUB+z6L1GFnUzCL3Iqb7YwrQRG9xM+riaxFz3cVXfhquqp51pH1duH3K5CoKrcXB13uMK3ylbfNQ9HyO+eG5NKVzQ+xZXsq81uXoBXL0Irl6SvXEHrrQOXEmtRK+ZanKleVwVwdVb4CoPrgTyJHxcbcQGNy5vLlczmLs152Jf2Yarda8mxn1cSf9NrjRw9QG4uuBxNb+Vq8BTno+rvvjum5P9fQT9pdVr98k9YHNxu7bzmPt4Rl/oiDXwpBfH8WE95cPaDawXgfVDiZXfI/md+zRiB/oQm5mf0UloNmLVRHbOpwP2taYOoKfXmuvQhJeRz1fg81WWYYZPD3Y19YANxYx2LRhVWjCrQwuSyNsb0IIUYtzy5cytaTdnLk9Y9/p65obUwLWip5HBdamRFy+NWROnL145d9n9ku/d9de9wf3vXf90dPGnn63Pv7258s/UQuz70Wd+ZDed5V/6vO/9mX8BdcAMFwAMAAA=");

export class LogValuesFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, LogValues.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: LogValues.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<LogValues>> {
    const factory = new LogValuesFactory(wallet);
    return factory.deploy(options);
  }
}
