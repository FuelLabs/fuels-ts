/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { EchoValues } from "./EchoValues";

const bytecode = decompressBytecode("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");

export class EchoValuesFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, EchoValues.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: EchoValues.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<EchoValues>> {
    const factory = new EchoValuesFactory(wallet);
    return factory.deploy(options);
  }
}
