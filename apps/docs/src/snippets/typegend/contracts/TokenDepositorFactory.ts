/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TokenDepositor } from "./TokenDepositor";

const bytecode = decompressBytecode("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");

export class TokenDepositorFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TokenDepositor.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TokenDepositor.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TokenDepositor>> {
    const factory = new TokenDepositorFactory(wallet);
    return factory.deploy(options);
  }
}
