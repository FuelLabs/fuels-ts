/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { ReturnContext } from "./ReturnContext";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VUTWgTQRR+TVea40BTLdNWg6Ylgj8BRXrcZROSui07Ug+5LFuRQi+mZUlDwEvAS4+toObgIQiC4GUSFHLco8ccPUmugQZyESI9xG82WRNCW5AGQuZ9+33vfXnvzfJeiopEEQo+mnQG/gwbDBRG/FTQCUWaznZvlj3Tfa7vkJeOCGZoOu8QxfuPKH/Wjoiztgb+L262SGSldLt0XZgN4eUomjRilZEud4GuNdL1oLsJXTnUqbOTlbaTYeRY0vY2Kco2Er7bjdvCkj9UnNzQEDPu6cSS3QRB8wV6ljS/VRxT2qom8toKF1ajCg1TGsRVYdXbYcw78Wlf3wNflmxCfwM1FoUpmZcG30joItvIB3UymvKZh/+a29VjwBbgbwG514e5Yz64FJwzqg6brvOVZ1HHbjBPgLO1SryTmuZ84naL5jMxfx694JtEpTQtI2/qkryfR3n1S/J+5FbAiQ85187jvFF9uLsVOy5tUgR9fv1Ex248l+TpGq2ps36A+dUZ+nRbYfi9455SAv2Kox+LwSyz9VxwDvpVr41xuT7G5c8Qd7blkmPLZcxwBT2PsoymL6CXpRzNwNMceJGljceVYCe2Ev4aepJcSRMXB8SMNLmGwC7UdzCTe243dR/ze4BaaidDD0djD43KGG8or80JT3sTXvshDl+3RIYxzLmM//tQGPFosI8G5m3KysSeKH24J3vI3Qvjc2a2OLwL4Fn11nh/5PFwzgkfeDLEcTfWVg1G74hm30eH95WbNeLZNjkG4t/4/mFUxbMP4Dztk+LOhdwTIhbyA09deDLlP+1b9Xysn/sP/cwV9RfW93aLh17BfblfKO6Wi+6LV/uHBfWuGr2/jv4CaBPWPNAEAAA=");

export class ReturnContextFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, ReturnContext.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: ReturnContext.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<ReturnContext>> {
    const factory = new ReturnContextFactory(wallet);
    return factory.deploy(options);
  }
}
