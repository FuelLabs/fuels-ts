/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { EchoBytes } from "./EchoBytes";

const bytecode = decompressBytecode("H4sIAAAAAAAAA61XTWgbRxR+lqVGmEIGYhczaYlaEkdO/7aNUgxtyS7SVusoQqPaJgrpdpUfU/fQWCipSMlFvbS51Sn9CYWCD6X4uPoJ5KhjjjmGnpxDoKYR9aGGmBzcb2Z3o7Ukp9BWIHY08+bNe9/3zXsrvqnRVaIIqc/zSXunM8J2duQc8UeCblL0dzu9GWUGdXimTFUrIpg5XucbjBKPj1PpyXpEPFmPXqWRb3j2HolcQ3e6LCmy7Xj1NMWT5uFgn7XHvi/9fXXs07DvRrBPjofY13kO9oXmHbnGHyaIP9D6bb6WPuGHJbvj0s99Nc621VgUWlZV4Hd+gvjGwN7vVDyFhoV4pp1u4pjIuqxqwd5M1UWuzZSvWeWXIW7N6dJUVSeG51GRbtxV6wbiz7Wu9WxbMi/4iHb4BmJ+OJDXVzx9j2o6/Qq8YxJvz3+T4FeH/zE8DZFuzoT83wr5X/sH/5d9/xH4uv6OTiTS7bjINtf5BrgetO9Ie+R+H7lPwm8d9hU1NsbVGPFpoTVw12KDfEVSCs9ZYsB0FbjHk/kYCUOLq7FxhMQZ15L4JRdSiKmRUFgbEmt3EzlNevk1V9RY6iLXkNry5xulYN6ec1+1C+5r9jn3deC2Vs1IbKK6SLszamwc1mG/6XEZrdtp9yTm48yI6sy8RBPmeKeWoRFo/znMRw6aKZ3lx2nqNFHyJbPORQXxNZOer3mdGWbdzrkfOEYC+VDczrqmwsYoS591xAwN6bNOVzsF7nKIo/QUv2yzHMJuLYTrGnCUMfprrRlP59TPz7bPj+RE5YO9loed8mPBz1KwNsgL/ebth12u5WkWeErtDOgS/B0xWKCXu3voJeXHI/kL8urlizHPEE3hyzPAMdeo4H694TyiN8GJ62n3cAe/Z3DHOj1+24iJETBPDjlzObQ+PWT9k9D6sSHrjlyX2rTzFIF+fjqQP0EH8hpxQVQ7TVHbILJNRvZsgqaL0Q/B/2OZf5+f637u9V7uzWs9rt1bvfnGjWDePuO+Bb2+DR0eZybpE8i3Zvn6s6C/2VSd5RO6p7954vMVYsY8fWzo8p7cd7riXWjrPeD4Ps5wQ2fLeuWf3V4J8bECTYTucyu5h7Yu+PncDWnLv5eKywT8SG730lba11YC2rqzt7boz0Bb3xON/hD3eg5PrxLPrpPEnm/hu83oFtZ+hM2pxyRtDw3YzoIncAQeSdYVBh4dAzxuoRb29h/y958M9t8k0jwfK8RzdeKFdRJzqPfzqE3FmOxloxijj5g65hNqPHdbt4tEzMzoDmJXtSvXVmd9K/1ta8F5J/3z9oXOY0HMCr8u8Eu7T3PFfhaKd9+QeEUvXvhQPQ41/w+3H1uNF8CBlwtLFid0vqH32xzlc/eg912af1EUXM3rj7Eh/RH3yPOrP8Pvy6rmB3gBxyE2camR6WJK8C1d5i34duLf4DbyDNz+K+47of2VMO79NeBzol98XDSvPgLPB7tzhs3P6l4UgIuPb4+fmIdnNyb7lVDj9G3g1n836RXpYwr9W9aDibPgrKRqxpg4B04+wr6zJu5auf/sVcl1ciEjzyxXS/LME7i7A7yMyTwcU+CLAmlqEb7FJD6VED87/w8/o0/xDWMr8qjHRdTjBRo5UDT1mlD5vSCK6LFybgH2JUa1eRq1F3RCLpGDZxd1rJFt6zRxfrHDFwXVyl4tnSrhjEvA6nwlmBtJLi50HGOFnGJZacAuaqitMdRW1HrUDbx/6Q5qCf9L1p8g79Eg7/2hvK1e3lGasjBvob8V3Em8O47KOTyj6GsxVXe76r1GU/0t6HN4l/MxskIY7R9y95d24VSATgT2Q0eoQdI3+oKbVD7T7Q56SwzvJUzeVfSJuMjrcVXX8kpjk957ZEbG4L03ejwv9d/DLP4LXPji6uIV5+LyZ5Xz1U+vLF9evLi07KhJ75+D///Bf46t/g10Kl+aWAwAAA==");

export class EchoBytesFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, EchoBytes.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: EchoBytes.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<EchoBytes>> {
    const factory = new EchoBytesFactory(wallet);
    return factory.deploy(options);
  }
}
