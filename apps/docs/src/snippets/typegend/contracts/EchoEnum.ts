/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export type ErrorInput = Enum<{ StateError: StateErrorInput, UserError: UserErrorInput }>;
export type ErrorOutput = Enum<{ StateError: StateErrorOutput, UserError: UserErrorOutput }>;
export enum StateErrorInput { Void = 'Void', Pending = 'Pending', Completed = 'Completed' };
export enum StateErrorOutput { Void = 'Void', Pending = 'Pending', Completed = 'Completed' };
export enum UserErrorInput { Unauthorized = 'Unauthorized', InsufficientPermissions = 'InsufficientPermissions' };
export enum UserErrorOutput { Unauthorized = 'Unauthorized', InsufficientPermissions = 'InsufficientPermissions' };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "enum Error",
      "concreteTypeId": "4ed298ed0be3fc65895c5d5263885191731caa9f79ff63e56d98b449e5ba4b3f",
      "metadataTypeId": 1
    },
    {
      "type": "enum StateError",
      "concreteTypeId": "e4477c45cbdbe1c5b569996f10f668d8ebf7136cc981e88159f9d681a9a89051",
      "metadataTypeId": 2
    },
    {
      "type": "enum UserError",
      "concreteTypeId": "206ffa564d197c05c9c6b188584edb017c4b69beee892c5248df7dbcf4a26f8e",
      "metadataTypeId": 3
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "enum Error",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "StateError",
          "typeId": 2
        },
        {
          "name": "UserError",
          "typeId": 3
        }
      ]
    },
    {
      "type": "enum StateError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "Void",
          "typeId": 0
        },
        {
          "name": "Pending",
          "typeId": 0
        },
        {
          "name": "Completed",
          "typeId": 0
        }
      ]
    },
    {
      "type": "enum UserError",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "Unauthorized",
          "typeId": 0
        },
        {
          "name": "InsufficientPermissions",
          "typeId": 0
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "error",
          "concreteTypeId": "4ed298ed0be3fc65895c5d5263885191731caa9f79ff63e56d98b449e5ba4b3f"
        }
      ],
      "name": "echo_error_enum",
      "output": "4ed298ed0be3fc65895c5d5263885191731caa9f79ff63e56d98b449e5ba4b3f",
      "attributes": null
    },
    {
      "inputs": [
        {
          "name": "state_error",
          "concreteTypeId": "e4477c45cbdbe1c5b569996f10f668d8ebf7136cc981e88159f9d681a9a89051"
        }
      ],
      "name": "echo_state_error_enum",
      "output": "e4477c45cbdbe1c5b569996f10f668d8ebf7136cc981e88159f9d681a9a89051",
      "attributes": null
    },
    {
      "inputs": [
        {
          "name": "user_error",
          "concreteTypeId": "206ffa564d197c05c9c6b188584edb017c4b69beee892c5248df7dbcf4a26f8e"
        }
      ],
      "name": "echo_user_error_enum",
      "output": "206ffa564d197c05c9c6b188584edb017c4b69beee892c5248df7dbcf4a26f8e",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class EchoEnumInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    echo_error_enum: FunctionFragment;
    echo_state_error_enum: FunctionFragment;
    echo_user_error_enum: FunctionFragment;
  };
}

export class EchoEnum extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: EchoEnumInterface;
  declare functions: {
    echo_error_enum: InvokeFunction<[error: ErrorInput], ErrorOutput>;
    echo_state_error_enum: InvokeFunction<[state_error: StateErrorInput], StateErrorOutput>;
    echo_user_error_enum: InvokeFunction<[user_error: UserErrorInput], UserErrorOutput>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
