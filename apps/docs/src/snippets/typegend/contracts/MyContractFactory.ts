/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { MyContract } from "./MyContract";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VUTWgTQRR+WaPNRRhoqmXa6qJpieBPQJEed9mETd2WHenBXtYURKmXWtZYCl5yETy2gtqDSA+CXoRJEMwxR4/Bk8e9FhrIQSGlh/jNJuuGWAPShWXnvfm+9759783wdo7KRBqFTzLwuo0E63aVj/iBoB3S6t5yW2N3jQY3VsnPa4KZSYPvE+mdm7RyFGjiKEgCH3CrScKWstSic8KqCb9IqayZrvR5xX/wvvd5bfAugLcV8dTas6XrFRh5jnT9RUqxhUyj1NJd4chvys4uJGEz7hvEsq0MgfMJfJa1vlQ8S7oqJ+K6yi+c2i44THFg7wqnGkQ239eHdX0NdTmyDv555JgUlmR+HngzYwi7thLmKSSVzhXo3yu1jDR8Z6FvArHne7HTDWApXBdUHjac5zO3kcetMV8AszRLfD83jPnA3SaNF9KNcdSCLxJt5mkacXMj4n7sxzVGxH3PnRCj9zCnj8O8UHW4spTe3lwkDXV+ftv4q4fv+L0m+UaS5rDHjQ30s8pQt0vKh+/l0gFlUD8d9ZkMe2tXi+E6rF91L/bL+dgvf0R+b1lOea6cRk9nWIGMCdR1s0gJ5D4DjDa1cKvClnRjDrXJzuSJiw1iZp7umwIzUV1Fb66WWrlr6ON15FCzGeV+GeeuVWJ/TWmsD2hZG9DYifzQc1EUGEO/t/CfN4Spp8K5NNF3S1YG5kXxo3lZQ+x2ZB/Tu8nemQDOqTbjOZLbvX5nGvBnIz/OyNysyeg10ak3qd655dYecTsgz4T9C+8ho13svQXmTocUdizC7hCxCB9qakGTJf9wX6n9mD/2H/zECfmj8ififw2I/8S5OKQIk1AYG3dY+eHTcunRs/UH5cdP1nuXnLrn6r8BWdT8AvgEAAA=");

export class MyContractFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, MyContract.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: MyContract.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<MyContract>> {
    const factory = new MyContractFactory(wallet);
    return factory.deploy(options);
  }
}
