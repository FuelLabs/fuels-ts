/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { SimpleToken } from "./SimpleToken";

const bytecode = decompressBytecode("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");

export class SimpleTokenFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, SimpleToken.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: SimpleToken.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<SimpleToken>> {
    const factory = new SimpleTokenFactory(wallet);
    return factory.deploy(options);
  }
}
