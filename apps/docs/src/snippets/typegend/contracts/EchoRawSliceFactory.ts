/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { EchoRawSlice } from "./EchoRawSlice";

const bytecode = decompressBytecode("H4sIAAAAAAAAA71XTWgbVxAeyVIimrZ+YLuYTUo2f46SJqA2dupDaXaRjKQqqp6wQkLbzTpNAgm0jVESt6UX9ZZeilPatBQKOfSQ48pSIUddCjn66KMMDdjUAl8MNjm437zdldaSbEoLMYh9+3be/Hzzzcyztp6ge0RhUn+vCWu7ERLb27xH2pqkhxSZsZLrUWFSQ0vNUDkTlmJquKKtCtI3z9GVF82wfNGM3KOQpaUXSeaqut0Sx2W65pQvUiw+ddw/l9nlXME7N4lzJ2W6Puqf43Uf+Q+1HOQLCzP8TXuuk7ac6Ja5xDqhR8Rbw6xHqnW6rtY42yxLvOdHSFvtOfup8qdQjcOfE3ZLH5NpR5QzkJ8ar8hc7anSlWW9tafwW9gtOlo26HU8j8lkdVZ9N+F/rqYHZBNqPRVpaKvw+XlPXCUtuUhzBn0HvPcx3p7+J9A7Af3DeJ6H/mZAvxHQ78a4u/73PP1h6PrmvEEkkzVHpheQE+S6V/57lkfsK27skYpM1mNqbQ6rNWx6uET65DV8VOGYXHjC+rt0/6p055xN+Dwaz0YakMuotYrLYay8/eoVf9+67LxlTTtnrKRzVmTJGMmfoLmLFAJX90EmfDCfaohiwhiTRPE3S6SVZkmYJbpqCvhRnbdb8h27ZZxDTscRVwa+j7pxVZ+pNceVrk929uuTiPGrzvvCosu5nni+9bCa6WBVc3FTWNVWoAc1sBtW9Kd7HnK52mM/p5zHLjsPGNMTKh6Vu9ldcnfY80cP+LMZ8GcTtjhm/9szyDrt99zCfB/bZ926c2ZRO6NxYA85Xa2zE7z/oLNfNfx962MnjrydsnLOadTdpFt3UfjvPFZrk89WK/4+cvs2178wIw2RP04j+QljZ45LDXFpnMZKnOMbFe3KLOfWrUlzuCHMGxWr4EzaZoKkSTEr7bzL+9LUlU6Zrq7brZn3wYULqCcDfjQ6uV9gfvu5Z+zcfayBF+fW5wFy048HtO3hvhTA1l27uC/BxvoePEh6PFgCD+b34ME+nwc/EQ08irm9Wks+Ji3dJMvE+wZ+W4J+wbefIfPBJrHs4R7ZLOGnk5UnQg5iIj9BjJ22gR7SOX/YO3/BP/+QKOHqmCctVyGt0CQ5jT5ZQu8uRg30zgGs0X+nDOzraj39h2EVicRUyrDhO/qQiOfqytYPrG8r4du74NnbH7AnfJ8Vfi3gl3TaseK8CPi7v4+/suMvdKjZgF75t9Odg4RWQA7cWES8OGJoq0a3zEltepGGgNVQHlih34Cjh1ADCZ/HvXOFTnt6jT30HlE908cLOPaRiTFHThXHpbZhcNxS29L/C26hPXD7v7i3ebaTJ03gsrNm7hP97uGiu70MeC7vjBkyv3HMfs5Qs0Ktk/VGe+ZtCI9DbSx8zg4GfMl0YonQWAb7GfSPgjOKmTDAe3hG7DWKqlpv8bz3ZlFO2VJzyIs7E4h7sA/fbgXjhg3p9sco8551cw+MK52IAz0rin4lmB92KxGTeSOmaikf5R7FdyL0kFR3vLdedu4570MmGbhHhM7jjgjfBj/59zWod/cM9IPwG5dSxlyJQkPu8wDbQK82+N5lr4kw65dFMXgVvUP1jOyw6hmoBc5Vdx/R+/SRgA8h14fLyEkas2yXXgzOFbkWx1IuR0bywr9rvIJczuxW5/cpdIb5HM+OG5Brz7VeObrNnAbfjqBXHuW7I2bfsXKKBoYQO+MLWxpmG+5Z3oxS88RJqNnzFz4u99TSR6pOUipXzJt5tU7W0Ud6ZL/2ZOMBewc9ezyzfHs4y/bw67U358279j1QzXVv3vWx+cizeSpg85Bnk+eib1OyTciF+W7Tx+6Pvfcb7/7S327ds3ua7bpcBQ+25A6epMHnm9dv3bHL17607352+/pNcMtf2tfvfD57rXz77p0v3P+V+O/VFfd54ME/phxBB0gNAAA=");

export class EchoRawSliceFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, EchoRawSlice.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: EchoRawSlice.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<EchoRawSlice>> {
    const factory = new EchoRawSliceFactory(wallet);
    return factory.deploy(options);
  }
}
