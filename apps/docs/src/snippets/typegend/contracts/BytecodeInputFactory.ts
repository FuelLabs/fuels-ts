/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { BytecodeInput } from "./BytecodeInput";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VVS2sbVxQ+esSa9JXbSnblayceiKyqm1akD7wo7R1GU1kdC19jp7iQ6bh1RVuo0TA4gtKNll46hbRZursuR1KXXcwiP0BLL72LDRF4E3DIwvnujGQL5wEhAjH3nvudc77znXNn+HGZtomSFP0mhHMaJtjpqbIRfyjpDqV2nNXjDFsRIRcb5FeSkhlpwY+I9JNPaP3JQVI+OUhvU+IGN/skq0HfHRCXZrfvL5JWMnLtod/iC/wKsV9nAX4fSLNXHvmp9XPw13kVeDs49JeAq6VDd8CuYc1Kg0Io7d5GtLb/C50aEasVhGvohFgbOJPRGXywl9Luxljs+ZF+Mc90xMsO9sFrBjlmpRkwvwK8URCy2t0HT1ay0uDZ3Ufd4CHysE26A31a2p17cexcCGw7WlsqD7uY50pUz3J315fA1OeJH5UvYib4cp+yVi7MWoz4ElGrQrOIG7wk7uVh3PAlcYnbEWYvxlx6DoYeKB0+rOd2W0uU9AX98bkgkpvdPj9qX8T+z90+FW9hdoSnZuEE2s25A0+XZkeL9EJf3Yd0XVZ7HvZ5pR9fJ5oyGmFLUMsxjzVmEDTredBwHfXlYw17+WhtocfV7iF89aH2h/LnQKIveqmRFr5IUxH84vwdD/k/UjY8P0beMnqoR3nVfFU7/444IM6YPVg4t3fO7M5qUHCWg3nHDIoqH7PSYhLcWouUQO0Z4JIztU9Vr3VWL4RF9Kl0tYLLAC52J/TXwLF2VzCjQtHamBeIf4y5+dIdlL/CjGGugjNdwElpNuTUG+PUW4AGY/tgZ6wmMbKDZ0lajCH3Aer/Qhq6Ft0ZA3qawd75LPfi3sSxNcRWHKL9s3NFq/F9Bc7uDu+T6k8wnEV1Bzs7I7tTDW7MG4wco023DCLHahOzmHB/YCqGJ2uMQVMP2jaz9c8IM6a0nJJ1pjkrLJFdEcTXGLUkpZyVstItOXPzJuGMnEaZJn/9VvAtDM4vkd9EcQ29/82DfXdkS5S2vhauFZBbl8gPv7oODrnwewt88G7AvAlXvSu+2xC3if65S5T6S4vff9zcI149AA77R/g/ZnQPZ38D880JEbBzz2ARy6npyEOEe6Ux1OUaZfjr4/5zQ//MyP8OKIxiRPoPoL8ZnOX+U52f+2dewT/xmv4vzL/Z3PJubzfcH3/fbmw2f2q4frOpvh2JZCp9aSKjXX7jzbfefucKe/e9bG5y6v38NJ+ZvXptTh9+b/LxM3X/KQeb7tSIBgAA");

export class BytecodeInputFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, BytecodeInput.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: BytecodeInput.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<BytecodeInput>> {
    const factory = new BytecodeInputFactory(wallet);
    return factory.deploy(options);
  }
}
