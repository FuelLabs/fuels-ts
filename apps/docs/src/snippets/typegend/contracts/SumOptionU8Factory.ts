/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { SumOptionU8 } from "./SumOptionU8";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VVzWsbRxR/Wm9iQQ+eYhmcSVpvWyeoH5SFOq5vmWUlJGUtPMKE+uDNprcW2kaotij04mOPTqEfR/8Ju3IOPe4xhx4EPdQ5RQQCNlhgAgGHJDi/mZGije0YQhaEZt6+33u/97n8wKU1Iov0M+6GR2mOHR0pGfF9SXdobCVcPhhjDZFycYtaJUsyzxZ8j8g5/IpWnvUs+axnr1HuPe53SVbibtQnLv1Ot1WlfNErbAxw1dNx9MLgEgbcx9Lfnh7i1PkU/ee8Av0g3m0tQq9mp1GffYgzK/ZnUxlsV/U5uJuGNSJWmxWR5xBsVfFuQb8DBvcFGXTE8M73nON+HmteQbwDXhfh45L0Y9YqQd+bFbLS2QFPVizb4NnZQdzgIRT3iajvXJBB8ouxXUihe0ufy8oPO+5nV8ez1Gm2JHTql4nvucd1HvClLk2WC+lkmRFfJGqX6BLsbp5h9+HA7tYZdu/zQOtsGJ1zp+mkKg+f1gub7UWyWoJ+nReEfHa68O+o+vBHJ3z/N6iRk8mB+wbde4O+cYexSD8xZw/1rBHL2DhEfp1Bzg/VXZYZQx3jUV07qcEWdE35oxP98z//pkstYdMVxMFFEzwTiRp/pmT4/zzapy9Qa4FaT5taJ7/B77Txm/T0WfVnJV4ZyWPFTcvD5XgmXIqd0I8/YmUSU+DerlIOvs9Dx7pYm9tgdUdcQR2LH5QwLE1iXoluehJ5TbbQR3NR372KnpuHj2bG972R721nJN92wNH4N1wMX62XqJ7UcvD5xOQr+Qdxfi09J69nCLkCZivT27uZ3t7FXQ7vp/RZ0dQPekEnU6vY1KSsZjL5bigPK/GXlz1GfxCN/Zk3O4b7W8QrPQo93J/g95TR33j3F3SuH5LSnTmhi9kOaw6FdSL0bp7Vr1LkucCj5iP8zAA/PsTfwUoY2tAx9RGTH7/y/bt6P8KPvwU+9474s/xfy+Bdg98kHvQwr6/39zrRdb0rGi61MdOTdVdgbnPz2OdyKWbRPrPCBtFqQ1B4A85uSOxH9J3nTtz0BMllzKwAr8ac+gbYmIWRbPku5kbVFD37hCmuLn/qDLleO14rcHWyXM2OtlMV66RHoi3oPHpSnc1OE2SH/oFl9ks8sYra6p2rdpM3hRyxLM7SuJLGncvgmPRoYrWM2BpzAnyPpsAX+1LN3zgvHSge1vuDXQq5zWDzQkPFJFTMOleIzcnEpvuoAvnP6z9Gt5tr39/+6dsfovUF+lc/r76f+Zf5YyplUAcAAA==");

export class SumOptionU8Factory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, SumOptionU8.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: SumOptionU8.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<SumOptionU8>> {
    const factory = new SumOptionU8Factory(wallet);
    return factory.deploy(options);
  }
}
