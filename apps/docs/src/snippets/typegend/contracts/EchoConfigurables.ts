/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum MyEnumInput { Checked = 'Checked', Pending = 'Pending' };
export enum MyEnumOutput { Checked = 'Checked', Pending = 'Pending' };

export type MyStructInput = { x: BigNumberish, y: BigNumberish, state: MyEnumInput };
export type MyStructOutput = { x: number, y: number, state: MyEnumOutput };

export type EchoConfigurablesConfigurables = Partial<{
  age: BigNumberish;
  tag: string;
  grades: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
  my_struct: MyStructInput;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(u8, str[4], [u8; 4], struct MyStruct)",
      "concreteTypeId": "5ab7b76c23738fa0bc19477aecfaf55b3a70dc841317cd30587e0299f1983d60",
      "metadataTypeId": 1
    },
    {
      "type": "[u8; 4]",
      "concreteTypeId": "f28afa065fc5de602456160c4155d4de7d9a61e85a995d209a14eab0b34bd6b4",
      "metadataTypeId": 2
    },
    {
      "type": "str[4]",
      "concreteTypeId": "94f0fa95c830be5e4f711963e83259fe7e8bc723278ab6ec34449e791a99b53a"
    },
    {
      "type": "struct MyStruct",
      "concreteTypeId": "392d58c694d2d91f3025f2bccfadacf2a105936f5da881b0899185d49f264522",
      "metadataTypeId": 4
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "(_, _, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "__tuple_element",
          "typeId": "94f0fa95c830be5e4f711963e83259fe7e8bc723278ab6ec34449e791a99b53a"
        },
        {
          "name": "__tuple_element",
          "typeId": 2
        },
        {
          "name": "__tuple_element",
          "typeId": 4
        }
      ]
    },
    {
      "type": "[_; 4]",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "__array_element",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        }
      ]
    },
    {
      "type": "enum MyEnum",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "Checked",
          "typeId": 0
        },
        {
          "name": "Pending",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct MyStruct",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "x",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "y",
          "typeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        },
        {
          "name": "state",
          "typeId": 3
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "echo_configurables",
      "output": "5ab7b76c23738fa0bc19477aecfaf55b3a70dc841317cd30587e0299f1983d60",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "age",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b",
      "offset": 3680
    },
    {
      "name": "tag",
      "concreteTypeId": "94f0fa95c830be5e4f711963e83259fe7e8bc723278ab6ec34449e791a99b53a",
      "offset": 3712
    },
    {
      "name": "grades",
      "concreteTypeId": "f28afa065fc5de602456160c4155d4de7d9a61e85a995d209a14eab0b34bd6b4",
      "offset": 3688
    },
    {
      "name": "my_struct",
      "concreteTypeId": "392d58c694d2d91f3025f2bccfadacf2a105936f5da881b0899185d49f264522",
      "offset": 3696
    }
  ]
};

const storageSlots: StorageSlot[] = [];

export class EchoConfigurablesInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    echo_configurables: FunctionFragment;
  };
}

export class EchoConfigurables extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: EchoConfigurablesInterface;
  declare functions: {
    echo_configurables: InvokeFunction<[], [number, string, [number, number, number, number], MyStructOutput]>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
