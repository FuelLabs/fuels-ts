/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { EchoEvmAddress } from "./EchoEvmAddress";

const bytecode = decompressBytecode("H4sIAAAAAAAAA61W32tbdRQ/7dI1K4V9YauG62R32HR3w4foWpnuYd+7NCb1LuRbWrAIMR3bpD5oS7oNQR+CgvRJO6Havsh8keLTTXILe1ECIgwF6YN/QIQVOrZAHiy07KF+zv3R3KVpUbRQ7vl+c35+Puece7Vmgm4RdZP713c/v1vrEru7dJdIV4+bpB7iWZekb1+gqaf1bvW0HrlFXe/BhrQnCno9F/MTzWNiXNY0OU3F0W4lzIjUHsHBszZ3teQ6qXRZFhpkqKSjihmKGubJkm+XOcDuM99uAXavwO5BYMdyPm2v5FOC8pa9UrxKUTE2WCs09BVllaf4bIxFcBYvFyUJozFIKrlmwF4YSaeUT9orHBN+V/heWWsx2Ai2wTmmrKoKztojvT2vGTcvq5yB/TnEOK+StiiOQt8clCrtTLlxUhHOcwr5JwoNOYS7fuR3FnZ1z/fJmkpXbVdOcdxqzZXNQcQUpG3sw+MdjntH0pf5ZLNPmAR7+LcqBvJIoc7n8XxTJSszgR/UsR6K5cVFLK5J2xDt/q/4/rvh6+PXJAEzR6l0BfrgfL9+t8ePXUdtuldvecaVmaN0ebV173iyx90qclkMfuNa2/z+6fmtxjr89oWWdrEn1BLz6qqsunKK6y0zj/59+UFwn3/bfj0/Yb+BnrkkxoQcyMbpzlXqQi8fhU73C9nRmhhPyCFFZLw4KbXJORKpSfluijGoiEJDXQGHSfA3inolcodfrqvCvRzz6nU2W/fOJs7cb/65iv7uyOltH8Nwzyy7sofVMnCYC37bjwf94tlDz6qWAq479OwnjFvcFKSkZGybLW4q9QNyO+Xnpod4bPELGX6oA0dxjyN7Gfno3kzZ3JOME/O16PHi3nPO/n157x58vQq+LmBOhzFXukhFwNlAwFlvwFlR4bfxEfJ5I+ZN5crN4hTiZuMlYU6Sl+8w13kRPKbBI+ZWjKGu+yEeP2rxuMY2/v0aY7se4nUdZxHiNdEZO9r1sWPbgNeFEK8LwG76EF5zPq8LynLkIbweDXhdIjr+dTTYzYQddY80q0Rark7YC1Fgjd1k651nmY5zPMbaaEQkdDOunHRa8hh29F9EX7HvnQQtI9Y3sHtrmzj26VBs6cZOLyJ+nfJZIubJaIyAG/QSy7m1vXuRHaGCmSDsHN1IO6RtCY4htR09iHHaj3EkiOH5h28T5y3874hA94iv2xvKRwT6Lt4N4J2092wRS4Tse337yyF7Fa7H5aKBHfrYbscwoeXA2QTeBZPQGR/AzLe/P+msNrFOJ1DziWyCNPQtevoUcEkAC2FkezBPiXab875feYjfM+7MTQBfV6enk06UOT43Pqy0Lcl1qxDGl/8Fbl2H4PZfcT+wj/Z6BxihJ/U5Sf38dHcM+PgH/ROej0wrtwgNZXCf4d1hx7Djj/AdnpHCE+pxZ72B/WGBI95PlsPvaewKvKe9OjKhOoJ5CPePN4utOhTqiHEdyJl9cz2G6zPp1PI5u0eZJJjvQiMRVVkZBadR6PMset8pJnZf8C736sVM/u9chrmoBfYqg/dHDr3ochHnPY+dgl7eeHY33cZ4axZ2issPv5vte64M/FiGj+kQnyVXNuP0nTms+znVQjm5HKbx7fnTj5d+qA5tLxnf/vbHmf7tz383l156blR7+OvPBWpufvr9zeszs4VrN24Ub87P85dt+Fy4PvvB3LXi+/OzH3qfvdS36D2PGX8D8QrIKhALAAA=");

export class EchoEvmAddressFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, EchoEvmAddress.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: EchoEvmAddress.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<EchoEvmAddress>> {
    const factory = new EchoEvmAddressFactory(wallet);
    return factory.deploy(options);
  }
}
