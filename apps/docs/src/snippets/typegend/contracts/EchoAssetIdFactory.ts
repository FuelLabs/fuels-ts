/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { EchoAssetId } from "./EchoAssetId";

const bytecode = decompressBytecode("H4sIAAAAAAAAA61WTWhjVRQ+6aQ2gzP2yrROeI70jfYnI6M+sJ0pgvSFNCY1jb2lUbuJaakDLWJb0s5QcJPlbISOtDq6quCiO1+aKOoqIMgsFLqSATcBKUxxAgUptIxQv3Pffc0zkxZEA+Hde985557vfOfnGXsWLRO1kPo9OZk9qgTE0RGfkfFQ0h0KVrMTe+fEuF0x7CnKD7dIEQ3axi6RefAqTT6qtshH1eAyBWaM2DbJRDGUq9FlGSvdzycpFIl2FLRe8gS9t7WeBb1eGStveHq8ziactWxcUDblrOVHKSRGuiu5mrkmU0WT95GRIPaiJ2+TiNS6CTrb0BeRWLmQjTlrfCfsrvG5TJUr0BGsg31FprZWvb2xazb69ZryK1UU0H8ed7wgY47ID0M+2m3LRKmq7okH4WepKhPOQa5md+HsPPwzoSdd2x0VyE6qdZzvLc2qdbQbdwoydh6Lx1W+95ZNv2Vje+dFlFi/Cnsr8OMV4AzjaclYccOzI1OlFd9dt727GJOxIxrtd2j7Gdh/ymffgd1rsH8Bz+uw78bKtX/XZ3/zdPv0l7bfAlsfXbMJnJTuy8SWZO6b+POny79zD7Ez3XiWC2rt5kBBJsqW750FW5X6vnhwQhwHjQTz5zxQuTHSwbkhj/nDGliSHodsowHHD65fkEuVwh7+JnlS4nt6osLDaZ2A83uNU/qwTPlwTsGfiPfucX8Cv7r6W6Em797RWBfhZ9jlqbit1nHmz+Gc8M4HvfPsu05fdsKJoMauiBFhd6Z76NYoBYD9Cci0PJserohxy+6VRJHnMraRWSQRz9jvxZnT4lSuJq8i519Cvr8MXFy3sKs4ua3WjCtR3qyflzfhP9eN3m+ZJ3D3uo7Vd/UaK5tq7cbKhB3nFO5SmjvUYSl0CnfDde62Fpv0pg+0H3y35qy0V+estAfO2EcvFx80x0Pr2o7twyN8eATwcPxOwnNR4xHoWQen4BEennWiM5+G3B5uxDbISFQpG8V+H/9DQXfx7jPIvHkA54jaPNk7RMKTV/7U4E/MOdb9hN/X9du0/pBPX7r6q2SkYIN9raFX/OE0YrKMMWCaQE/NQGa8E7PBbpTpMya26UJ6AH+LDOQh8vOSHHOsvIROupWMXatR50Vt1z7F7mVVLxPgVcm0NpMJccyvjPdLY99m3NI4ND3cQ/8iboFT4vYf4x44qusHZpX+DOKeq3Kuqb7YgGlU9wkLvJg893ieRGrcG50qemMYcxOzzeF+xzWKeeXwbOFa5n7Rjn4hMFefhqwp4kH0jE6vZ7R5PQPcmGJ8AMNc9Q3ivgHOVvOTuDPdUxDRDGNEDfUj9x3MHfkM+shFzNiw7o+6P6iZoPsI5mm9v6B3o4/V94PYc416e3FCHfbpOpz1ak3NhukOxLiAGCOGh4s6xoEjzVG7j6NknaMg9SZxnlTYMJPNM3yGZzD3kFqVLzXgc2MdjrjfHsCCue/ymfTx2d6kjlw+dR3hDom4hjnnXc76mbOIsolvmeyY0yqjJDjvczUrJNN2CLkdgjxmneITvQbceLN7X7APwPu/53SXTx/ydQzZNBHnRqQ2wHim1Hrsm+NzgTrPRS3GZav85G+0MdQoy7m40Wf7wZXyveDzvauRq+Oel9prFyMm40a+ubFvEnc/x7ZPVxzroofBL/7mVHa+xAzSMbAb7SXw7XxjZnYhN720dGM5N/d+4z43s/Dh4nR+bmlh/p/nc/OLN/nLm+iLnW8nb751dj49eynz8ddvDAyvf3X95+mRns9/H/op/cuP5/T3uuU+z97Tz4L7pLJ+rvwN+XLdZ+ALAAA=");

export class EchoAssetIdFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, EchoAssetId.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: EchoAssetId.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<EchoAssetId>> {
    const factory = new EchoAssetIdFactory(wallet);
    return factory.deploy(options);
  }
}
