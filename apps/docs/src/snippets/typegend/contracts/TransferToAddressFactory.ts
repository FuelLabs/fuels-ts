/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TransferToAddress } from "./TransferToAddress";

const bytecode = decompressBytecode("H4sIAAAAAAAAA5VXTYhbVRQ++ZmZ1Bnt1aQi1+o8ZFriqgHbUqHVF5Nnkmbi3DozWJCQCf4gIjrEaSm6eQsXupsKahcuBhXp8mWSgC6EgCIuusjSZUAqjM7AbIQOXYzfue9m8vImU2jgcc+757vnfufcc859kbsZWiOKkv7N2NX9bkTs7/McyW1FN2mSqrndmMhSV+ZXqFGMKuGkXLklyLr3Al2934+q+/34GkV2ZKFHtR2xaXDFI3B/GdzPqtD5Y4z+b1nukVrwdhuKEunKCWCtWcgivXMO8x2eF+mFDlUrgkTlrFtzMqQKm+uNecwX2t2qI3h9H3ucxNpnVMETjSJ0zllXlTu3NK6U6rIMXK+2Q7JhUwLj0yrX7Gn7Wd6rrbQMDnIrE+Z5h/0AZsXHTIzD/CoXepR0Ut0kOMl5out5OqkKbVdzcOa6Y/z/3dhdf4DdX2ROY1Z9zKlxmB84js9XUk9cn6co/Pv0vE2kcp11uUVh7Bd6z3LrFuvkXSusb5ozsbCfxfupcpO0XOI4tX7y1x3i8L3m+YZnw18rvRzvIr4ZnMtp5VBCzyEGKkvpRh5ydsmuLnqnGaMqlMC4MZiHfKO2TWdUobmhSli7xHufsFWhZeFs02kn7lZz3plkFjG2yYL8NmQbchT5G/F9b1nYK4G862EN9o67OIvugZxrZ/g85N1wfKIXtB8FzxtiN/taznJOtUj7gpy6WMqjdiLpwF63D9bUOrdD8VmTb/ZILhE9mV12Ddeo4dqXW2oMl0jLcFnxc5q5tK5qOZviGMwYvyOo4RjeP0AMY8lsfDD3D/C7R9j+1theDdi+EbD9WMA2uHqrJt6/Qf5ojI7f2yEdc1oFp6jh9N0R+gHnk0fo40Y/bfTMI3DWmyvIl3nUuA0s6j1uY+0E5m3MF4Pz6q2OQn2IdH2O+94nyAPU09j4LJn4uIH4vBeIj2CeMq+5RGRecL2/DsyfY2ruWbZVBe+ko/vCJYw2xoz23YFveXpO++nLKcgTxudJ+OHCD6XK7X7AvynMr9a2xWt1R82gzhaCeuT6rvbT0X4yVgF72WDLWj/wq9whjS2lBtgMsK8abEHrD+x2RMiuAPaVunPlGLA5rR/atUbtNneBfcnYfVnrh3YzAbs4u6YFn+f0/DD+nwfi/+MgT87j/sJ7A/cC1og84jyB/u4MzzqFc+ys+PY/Y/scUwKW8yOrdUPOqwHOzKMPzEU9P+Tqjsag2YWtC3VnMQq/XtT6IedigLMXqpv3B7kslpV9jSLYr2364BqfofB77aF747jJzfVAj9rwe1QKfW7T9Lmz7qXs8uMSNXIKz1eop68T/l0vcxskC32dk/I/PHuCbkH3DTCX72ns7CFsCXEuWbiLie+DhKico1o2g/VWcP2sWT81WH+TSAxs6FjsxF2Z83jvCO/9JeuH66ceYr3mfsT6A/5Yb/vr10mW4YfP3/K/Mcw9p78x/PmBXzhjC98Y2EPwHrbcsx7kY0Lm+iT/9UJnRbN83/J3SrKEHlGkFEYbI9dJLFlKuZCnIceNPAl5At8RLvqAzu16niZhJ3J4jLB9/W44JuQeheNwPHyO9SJFkhWL8K2QwmhjFLjTYsnKXBfyNOS4kSchTyRLkLGGuTA33pP5mjHGoywKrgWMhNghH0Zz6viYM+lqPos4k4X+SMyuES1zzE6g1njfpD+W6tnYoH9eDPTPaKB/Dnop98/BnYFa97iXxFVZ3yWB/unh3hAzjEXdPhrU674/UuMe989HeA9gp0fuhTLqcKTPeegrIsHcgD2m9UO7GwG7zI177SSeKa0b2vQCNhnHfTYKP2JaZ+xpzJU5xNtmXBx6v5cvct7anBNduZcJ520oJ/y68L/R4l3OpUCu67Mr4OzXGvUPP373ncYd/aPovv5RxPyfeOp/p5ZwZ2AMAAA=");

export class TransferToAddressFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TransferToAddress.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TransferToAddress.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TransferToAddress>> {
    const factory = new TransferToAddressFactory(wallet);
    return factory.deploy(options);
  }
}
