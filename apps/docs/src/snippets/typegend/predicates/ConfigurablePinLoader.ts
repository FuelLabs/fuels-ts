/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

export type ConfigurablePinLoaderConfigurables = Partial<{
    PIN: BigNumberish;
}>;

export type ConfigurablePinLoaderInputs = [pin: BigNumberish];

export type ConfigurablePinLoaderParameters = Omit<
  PredicateParams<ConfigurablePinLoaderInputs, ConfigurablePinLoaderConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [],
  "functions": [
    {
      "inputs": [
        {
          "name": "pin",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PIN",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 88
    }
  ]
};

const bytecode = decompressBytecode('H4sIAAAAAAAAA5NyMGAIcGQwkHIJYNjlycBg5MDSCOQrxALZQJoDyG9ScBVmCHIVYPFyYWCYcGbjlTjG//JFb76F1wqrdVjufaW25lAh06mQ0MCb1w0WMkAAB4RitQQA0v6aVGAAAAA=');

export class ConfigurablePinLoader extends Predicate<
  ConfigurablePinLoaderInputs,
  ConfigurablePinLoaderConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: ConfigurablePinLoaderParameters) {
    super({ abi, bytecode, ...params });
  }
}
