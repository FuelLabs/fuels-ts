/* Autogenerated file. Do not edit manually. */

/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
*/


import type { BigNumberish, Bytes, EvmAddress, RawSlice, StdString, StrSlice } from 'fuels';
import type { ArrayOfLength, Enum, Option, Result } from './common';

export enum EnumWithNative { Checked = 'Checked', Pending = 'Pending' };
export enum ExternalEnum { A = 'A', B = 'B' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ConfigurablesInput = { U8_VALUE: BigNumberish, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<BigNumberish>, GENERIC_STRUCT_VALUE: StructDoubleGenericInput<StructDoubleGenericInput<BigNumberish, BigNumberish>, BigNumberish> };
export type ConfigurablesOutput = { U8_VALUE: number, BOOL_VALUE: boolean, B256_VALUE: string, OPTION_U8_VALUE: Option<number>, GENERIC_STRUCT_VALUE: StructDoubleGenericOutput<StructDoubleGenericOutput<number, number>, number> };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type EnumDoubleGenericInput<T1, T2> = Enum<{ a: T1, b: T2 }>;
export type EnumDoubleGenericOutput<T1, T2> = EnumDoubleGenericInput<T1, T2>;
export type EnumWithBuiltinTypeInput = Enum<{ a: boolean, b: BigNumberish }>;
export type EnumWithBuiltinTypeOutput = EnumWithBuiltinTypeInput;
export type EnumWithStructsInput = Enum<{ a: EnumWithNative, b: StructSimpleInput, c: EnumDoubleGenericInput<BigNumberish, StructSimpleInput> }>;
export type EnumWithStructsOutput = Enum<{ a: EnumWithNative, b: StructSimpleOutput, c: EnumDoubleGenericOutput<BigNumberish, StructSimpleOutput> }>;
export type EnumWithVectorInput = Enum<{ num: BigNumberish, vec: BigNumberish[] }>;
export type EnumWithVectorOutput = Enum<{ num: number, vec: number[] }>;
export type ExternalStructInput = { value: BigNumberish };
export type ExternalStructOutput = ExternalStructInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type StructAInput = { propA1: BigNumberish };
export type StructAOutput = { propA1: number };
export type StructBInput = { propB1: StructAInput, propB2: BigNumberish };
export type StructBOutput = { propB1: StructAOutput, propB2: number };
export type StructCInput = { propC1: StructAInput, propC2: StructBInput[], propC3: StructDInput<BigNumberish, BigNumberish, StructFInput<string>>, propC4: StructDInput<BigNumberish, BigNumberish, StructFInput<boolean>>[], propC5: StructDInput<BigNumberish, BigNumberish, StructFInput<StructGInput[]>>[] };
export type StructCOutput = { propC1: StructAOutput, propC2: StructBOutput[], propC3: StructDOutput<number, number, StructFOutput<string>>, propC4: StructDOutput<number, number, StructFOutput<boolean>>[], propC5: StructDOutput<number, number, StructFOutput<StructGOutput[]>>[] };
export type StructDInput<T, U, V> = { propD1: StructEInput<T>[], propD2: U, propD3: V };
export type StructDOutput<T, U, V> = { propD1: StructEOutput<T>[], propD2: U, propD3: V };
export type StructDoubleGenericInput<T1, T2> = { a: T1, b: T2 };
export type StructDoubleGenericOutput<T1, T2> = StructDoubleGenericInput<T1, T2>;
export type StructEInput<T> = { propE1: StructAInput, propE2: StructBInput, propE3: T };
export type StructEOutput<T> = { propE1: StructAOutput, propE2: StructBOutput, propE3: T };
export type StructFInput<T> = { propF1: BigNumberish, propF2: T };
export type StructFOutput<T> = StructFInput<T>;
export type StructGInput = { propG1: BigNumberish };
export type StructGOutput = { propG1: number };
export type StructGenericWithEnumInput<T1, T2> = { a: T1, b: EnumDoubleGenericInput<T1, T2> };
export type StructGenericWithEnumOutput<T1, T2> = { a: T1, b: EnumDoubleGenericOutput<T1, T2> };
export type StructSimpleInput = { a: boolean, b: BigNumberish };
export type StructSimpleOutput = { a: boolean, b: number };
export type StructSingleGenericInput<T> = { a: T };
export type StructSingleGenericOutput<T> = StructSingleGenericInput<T>;
export type StructWithEnumArrayInput = { a: ArrayOfLength<EnumWithNative, 3> };
export type StructWithEnumArrayOutput = StructWithEnumArrayInput;
export type StructWithGenericArrayInput<K> = { a: ArrayOfLength<StructDoubleGenericInput<K, BigNumberish>, 3> };
export type StructWithGenericArrayOutput<K> = { a: ArrayOfLength<StructDoubleGenericOutput<K, number>, 3> };
export type StructWithImplicitGenericsInput<E, F> = { arr: ArrayOfLength<E, 3>, tuple: [E, F], string: string, array: ArrayOfLength<BigNumberish, 2> };
export type StructWithImplicitGenericsOutput<E, F> = { arr: ArrayOfLength<E, 3>, tuple: [E, F], string: string, array: ArrayOfLength<number, 2> };
export type StructWithMultiOptionInput = { multiple: ArrayOfLength<Option<BigNumberish>, 5> };
export type StructWithMultiOptionOutput = { multiple: ArrayOfLength<Option<number>, 5> };
export type StructWithNestedArrayInput = { a: ArrayOfLength<StructDoubleGenericInput<StructSingleGenericInput<BigNumberish>, string>, 2> };
export type StructWithNestedArrayOutput = { a: ArrayOfLength<StructDoubleGenericOutput<StructSingleGenericOutput<BigNumberish>, string>, 2> };
export type StructWithNestedStructInput = { a: StructDoubleGenericInput<StructSingleGenericInput<BigNumberish>, BigNumberish> };
export type StructWithNestedStructOutput = { a: StructDoubleGenericOutput<StructSingleGenericOutput<number>, number> };
export type StructWithNestedTupleInput = { a: [BigNumberish, StructSingleGenericInput<StructSingleGenericInput<BigNumberish>>, string] };
export type StructWithNestedTupleOutput = { a: [number, StructSingleGenericOutput<StructSingleGenericOutput<BigNumberish>>, string] };
export type StructWithSingleOptionInput = { single: Option<StructWithMultiOptionInput> };
export type StructWithSingleOptionOutput = { single: Option<StructWithMultiOptionOutput> };
export type StructWithVectorInput = { num: BigNumberish, vec: BigNumberish[] };
export type StructWithVectorOutput = { num: number, vec: number[] };

export interface AbiContractTypes {
    functions: {
        configurables: {
            inputs: [];
            output: ConfigurablesOutput;
        };
        multi_arg_b256_bool: {
            inputs: [x: string, y: boolean];
            output: [string, boolean];
        };
        multi_arg_complex: {
            inputs: [x: StructDoubleGenericInput<ArrayOfLength<string, 3>, BigNumberish>, y: ArrayOfLength<StructDoubleGenericInput<BigNumberish, boolean>, 4>, z: [string, boolean], a: StructSimpleInput];
            output: void;
        };
        multi_arg_str_str: {
            inputs: [x: string, y: string];
            output: [string, string];
        };
        multi_arg_struct_vector: {
            inputs: [x: StructSimpleInput, y: BigNumberish[]];
            output: [StructSimpleOutput, number[]];
        };
        multi_arg_u32_vector_vector: {
            inputs: [x: BigNumberish, y: BigNumberish[], z: BigNumberish[]];
            output: [number, BigNumberish[], BigNumberish[]];
        };
        multi_arg_u64_struct: {
            inputs: [x: BigNumberish, y: StructSimpleInput];
            output: [BigNumberish, StructSimpleOutput];
        };
        multi_arg_u64_u64: {
            inputs: [x: BigNumberish, y: BigNumberish];
            output: BigNumberish;
        };
        multi_arg_vector_b256: {
            inputs: [x: BigNumberish[], y: string];
            output: [number[], string];
        };
        multi_arg_vector_vector: {
            inputs: [x: BigNumberish[], y: BigNumberish[]];
            output: [number[], number[]];
        };
        types_address: {
            inputs: [x: AddressInput];
            output: AddressOutput;
        };
        types_alias_tuple_with_native_types: {
            inputs: [x: [AssetIdInput, AssetIdInput, boolean]];
            output: [AssetIdOutput, AssetIdOutput, boolean];
        };
        types_array: {
            inputs: [x: ArrayOfLength<BigNumberish, 4>];
            output: ArrayOfLength<number, 4>;
        };
        types_array_struct: {
            inputs: [x: ArrayOfLength<StructSimpleInput, 3>];
            output: ArrayOfLength<StructSimpleOutput, 3>;
        };
        types_array_with_generic_struct: {
            inputs: [x: ArrayOfLength<StructDoubleGenericInput<StructSingleGenericInput<BigNumberish>, string>, 2>];
            output: ArrayOfLength<StructDoubleGenericOutput<StructSingleGenericOutput<BigNumberish>, string>, 2>;
        };
        types_asset_id: {
            inputs: [x: AssetIdInput];
            output: AssetIdOutput;
        };
        types_b256: {
            inputs: [x: string];
            output: string;
        };
        types_b512: {
            inputs: [x: string];
            output: string;
        };
        types_bool: {
            inputs: [x: boolean];
            output: boolean;
        };
        types_bytes: {
            inputs: [x: Bytes];
            output: Bytes;
        };
        types_contract_id: {
            inputs: [x: ContractIdInput];
            output: ContractIdOutput;
        };
        types_enum: {
            inputs: [x: EnumWithNative];
            output: EnumWithNative;
        };
        types_enum_external: {
            inputs: [x: ExternalEnum];
            output: ExternalEnum;
        };
        types_enum_with_builtin_type: {
            inputs: [x: EnumWithBuiltinTypeInput];
            output: EnumWithBuiltinTypeOutput;
        };
        types_enum_with_structs: {
            inputs: [x: EnumWithStructsInput];
            output: EnumWithStructsOutput;
        };
        types_enum_with_vector: {
            inputs: [x: EnumWithVectorInput];
            output: EnumWithVectorOutput;
        };
        types_evm_address: {
            inputs: [x: EvmAddress];
            output: EvmAddress;
        };
        types_generic_enum: {
            inputs: [x: EnumDoubleGenericInput<BigNumberish, BigNumberish>];
            output: EnumDoubleGenericOutput<number, number>;
        };
        types_identity: {
            inputs: [x: IdentityInput];
            output: IdentityOutput;
        };
        types_option: {
            inputs: [x?: Option<BigNumberish>];
            output: Option<number>;
        };
        types_option_geo: {
            inputs: [x?: Option<StructSimpleInput>];
            output: Option<StructSimpleOutput>;
        };
        types_raw_slice: {
            inputs: [x: RawSlice];
            output: RawSlice;
        };
        types_result: {
            inputs: [x: Result<BigNumberish, BigNumberish>];
            output: Result<BigNumberish, string>;
        };
        types_std_string: {
            inputs: [x: StdString];
            output: StdString;
        };
        types_str: {
            inputs: [x: string];
            output: string;
        };
        types_str_slice: {
            inputs: [x: StrSlice];
            output: StrSlice;
        };
        types_struct_double_generic: {
            inputs: [x: StructGenericWithEnumInput<BigNumberish, BigNumberish>];
            output: StructGenericWithEnumOutput<number, number>;
        };
        types_struct_external: {
            inputs: [x: ExternalStructInput];
            output: ExternalStructOutput;
        };
        types_struct_generic: {
            inputs: [x: StructSingleGenericInput<BigNumberish>];
            output: StructSingleGenericOutput<number>;
        };
        types_struct_simple: {
            inputs: [x: StructSimpleInput];
            output: StructSimpleOutput;
        };
        types_struct_with_array: {
            inputs: [x: StructWithGenericArrayInput<string>];
            output: StructWithGenericArrayOutput<string>;
        };
        types_struct_with_array_of_enums: {
            inputs: [x: StructWithEnumArrayInput];
            output: StructWithEnumArrayOutput;
        };
        types_struct_with_complex_nested_struct: {
            inputs: [x: StructDInput<BigNumberish, BigNumberish, StructFInput<StructGInput[]>>];
            output: boolean;
        };
        types_struct_with_implicit_generics: {
            inputs: [x: StructWithImplicitGenericsInput<string, BigNumberish>];
            output: StructWithImplicitGenericsOutput<string, number>;
        };
        types_struct_with_multiple_struct_params: {
            inputs: [x: StructAInput, y: StructBInput, z: StructCInput];
            output: boolean;
        };
        types_struct_with_nested_array: {
            inputs: [x: StructWithNestedArrayInput];
            output: StructWithNestedArrayOutput;
        };
        types_struct_with_nested_struct: {
            inputs: [x: StructWithNestedStructInput];
            output: StructWithNestedStructOutput;
        };
        types_struct_with_nested_tuple: {
            inputs: [x: StructWithNestedTupleInput];
            output: StructWithNestedTupleOutput;
        };
        types_struct_with_single_option: {
            inputs: [x: StructWithSingleOptionInput];
            output: StructWithSingleOptionOutput;
        };
        types_struct_with_tuple: {
            inputs: [x: StructSingleGenericInput<[boolean, BigNumberish]>];
            output: StructSingleGenericOutput<[boolean, BigNumberish]>;
        };
        types_struct_with_vector: {
            inputs: [x: StructWithVectorInput];
            output: StructWithVectorOutput;
        };
        types_tuple: {
            inputs: [x: [BigNumberish, BigNumberish, BigNumberish]];
            output: [number, number, number];
        };
        types_tuple_complex: {
            inputs: [x: [BigNumberish, StructSingleGenericInput<StructSingleGenericInput<BigNumberish>>, string]];
            output: [number, StructSingleGenericOutput<StructSingleGenericOutput<BigNumberish>>, string];
        };
        types_tuple_with_native_types: {
            inputs: [x: [AssetIdInput, AssetIdInput, boolean]];
            output: [AssetIdOutput, AssetIdOutput, boolean];
        };
        types_u16: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u256: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u32: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_u64: {
            inputs: [x: BigNumberish];
            output: BigNumberish;
        };
        types_u8: {
            inputs: [x: BigNumberish];
            output: number;
        };
        types_value_then_value_then_void_then_void: {
            inputs: [x: BigNumberish, y: BigNumberish, z?: undefined, a?: undefined];
            output: void;
        };
        types_value_then_void: {
            inputs: [x: BigNumberish, y?: undefined];
            output: void;
        };
        types_value_then_void_then_value: {
            inputs: [x: BigNumberish, y: undefined, z: BigNumberish];
            output: void;
        };
        types_vector_boolean: {
            inputs: [x: boolean[]];
            output: boolean[];
        };
        types_vector_geo: {
            inputs: [x: StructSimpleInput[]];
            output: StructSimpleOutput[];
        };
        types_vector_inside_array: {
            inputs: [x: ArrayOfLength<BigNumberish[], 1>];
            output: ArrayOfLength<number[], 1>;
        };
        types_vector_inside_vector: {
            inputs: [x: BigNumberish[][]];
            output: number[][];
        };
        types_vector_option: {
            inputs: [x: StructWithMultiOptionInput[]];
            output: StructWithMultiOptionOutput[];
        };
        types_vector_u8: {
            inputs: [x: BigNumberish[]];
            output: number[];
        };
        types_void: {
            inputs: [x?: undefined];
            output: void;
        };
        types_void_then_value: {
            inputs: [x: undefined, y: BigNumberish];
            output: void;
        };
    };
    configurables: Partial<{
        U8_VALUE: BigNumberish;
        BOOL_VALUE: boolean;
        B256_VALUE: string;
        OPTION_U8_VALUE: Option<BigNumberish>;
        GENERIC_STRUCT_VALUE: StructDoubleGenericInput<StructDoubleGenericInput<BigNumberish, BigNumberish>, BigNumberish>;
    }>;
}