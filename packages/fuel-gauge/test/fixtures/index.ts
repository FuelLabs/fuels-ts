import { getForcProject } from '@fuel-ts/utils/test-utils';
import type { JsonAbi } from 'fuels';
import { join } from 'path';

export enum FuelGaugeProjectsEnum {
  ADVANCED_LOGGING = 'advanced-logging',
  ADVANCED_LOGGING_OTHER_CONTRACT = 'advanced-logging-other-contract',
  ADVANCED_LOGGING_OTHER_CONTRACT_ABI = 'advanced-logging-other-contract-abi',
  AUTH_TESTING_ABI = 'auth_testing_abi',
  AUTH_TESTING_CONTRACT = 'auth_testing_contract',
  BYTES = 'bytes',
  CALL_TEST_CONTRACT = 'call-test-contract',
  CONFIGURABLE_CONTRACT = 'configurable-contract',
  COMPLEX_SCRIPT = 'complex-script',
  COMPLEX_PREDICATE = 'complex-predicate',
  COLLISION_IN_FN_NAMES = 'collision_in_fn_names',
  COVERAGE_CONTRACT = 'coverage-contract',
  GENERIC_TYPES_CONTRACT = 'generic-types-contract',
  LIQUIDITY_POOL = 'liquidity-pool',
  MULTI_TOKEN_CONTRACT = 'multi-token-contract',
  PAYABLE_ANNOTATION = 'payable-annotation',
  PREDICATE_ADDRESS = 'predicate-address',
  PREDICATE_BYTES = 'predicate-bytes',
  PREDICATE_CONDITIONAL_INPUTS = 'predicate-conditional-inputs',
  PREDICATE_FALSE = 'predicate-false',
  PREDICATE_MAIN_ARGS_STRUCT = 'predicate-main-args-struct',
  PREDICATE_MAIN_ARGS_VECTOR = 'predicate-main-args-vector',
  PREDICATE_MULTI_ARGS = 'predicate-multi-args',
  PREDICATE_RAW_SLICE = 'predicate-raw-slice',
  PREDICATE_STD_LIB_STRING = 'predicate-std-lib-string',
  PREDICATE_STRUCT = 'predicate-struct',
  PREDICATE_TRIPLE_SIG = 'predicate-triple-sig',
  PREDICATE_TRUE = 'predicate-true',
  PREDICATE_WITH_CONFIGURABLE = 'predicate-with-configurable',
  PREDICATE_U32 = 'predicate-u32',
  PREDICATE_VECTOR_TYPES = 'predicate-vector-types',
  PREDICATE_INPUT_DATA = 'predicate-input-data',
  RAW_SLICE = 'raw-slice',
  REVERT_ERROR = 'revert-error',
  SCRIPT_BYTES = 'script-bytes',
  SCRIPT_MAIN_ARGS = 'script-main-args',
  SCRIPT_MAIN_RETURN_STRUCT = 'script-main-return-struct',
  SCRIPT_MAIN_TWO_ARGS = 'script-main-two-args',
  SCRIPT_STD_LIB_STRING = 'script-std-lib-string',
  SCRIPT_WITH_CONFIGURABLE = 'script-with-configurable',
  SCRIPT_WITH_ARRAY = 'script-with-array',
  SCRIPT_WITH_VECTOR = 'script-with-vector',
  SCRIPT_WITH_VECTOR_ADVANCED = 'script-with-vector-advanced',
  SCRIPT_WITH_VECTOR_MIXED = 'script-with-vector-mixed',
  STD_LIB_STRING = 'std-lib-string',
  STORAGE_TEST_CONTRACT = 'storage-test-contract',
  TOKEN_ABI = 'token_abi',
  TOKEN_CONTRACT = 'token_contract',
  VECTOR_TYPES_CONTRACT = 'vector-types-contract',
  VECTOR_TYPES_SCRIPT = 'vector-types-script',
  VECTORS = 'vectors',
}

export const getFuelGaugeForcProject = (project: FuelGaugeProjectsEnum) =>
  getForcProject<JsonAbi>({
    projectDir: join(__dirname, 'forc-projects', project),
    projectName: project,
  });
