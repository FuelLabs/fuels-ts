/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import {
  Account,
  BigNumberish,
  decompressBytecode,
  Script,
} from 'fuels';

export type ScoreInput = { user: BigNumberish, points: BigNumberish };
export type ScoreOutput = { user: number, points: number };

export type MyScriptInputs = [score: ScoreInput];
export type MyScriptOutput = boolean;

export type MyScriptConfigurables = Partial<{
  SHOULD_RETURN: boolean;
}>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "struct Score",
      "components": [
        {
          "name": "user",
          "type": 2,
          "typeArguments": null
        },
        {
          "name": "points",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "score",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SHOULD_RETURN",
      "configurableType": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "offset": 640
    }
  ]
};

const bytecode = decompressBytecode('0x-bytecode-here');

export class MyScript extends Script<MyScriptInputs, MyScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
