/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import {
  BigNumberish,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

export type MyPredicateConfigurables = Partial<{
    FEE: BigNumberish;
    ADDRESS: string;
}>;

export type MyPredicateInputs = [fee: BigNumberish, address: string];

export type MyPredicateParameters = Omit<
  PredicateParams<MyPredicateInputs, MyPredicateConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "fee",
          "type": 2,
          "typeArguments": null
        },
        {
          "name": "address",
          "type": 0,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "FEE",
      "configurableType": {
        "name": "",
        "type": 2,
        "typeArguments": null
      },
      "offset": 904
    },
    {
      "name": "ADDRESS",
      "configurableType": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "offset": 872
    }
  ]
};

const bytecode = decompressBytecode('0x-bytecode-here');

export class MyPredicate extends Predicate<
  MyPredicateInputs,
  MyPredicateConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: MyPredicateParameters) {
    super({ abi, bytecode, ...params });
  }
}
