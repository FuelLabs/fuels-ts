/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  EvmAddress,
  FunctionFragment,
  Interface,
  InvokeFunction,
  RawSlice,
  StdString,
  StrSlice,
} from 'fuels';

import type { Option, Enum, Vec, Result } from "./common";

export type EnumWithVectorInput = Enum<{ num: BigNumberish, vec: Vec<BigNumberish> }>;
export type EnumWithVectorOutput = Enum<{ num: number, vec: Vec<number> }>;
export enum ExternalEnumInput { A = 'A', B = 'B' };
export enum ExternalEnumOutput { A = 'A', B = 'B' };
export type GenericEnumInput<T1, T2> = Enum<{ a: T1, b: T2 }>;
export type GenericEnumOutput<T1, T2> = GenericEnumInput<T1, T2>;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum MyEnumInput { Checked = 'Checked', Pending = 'Pending' };
export enum MyEnumOutput { Checked = 'Checked', Pending = 'Pending' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type ExternalStructInput = { value: BigNumberish };
export type ExternalStructOutput = { value: BN };
export type GenericStructWithEnumInput<T1, T2> = { a: T1, b: GenericEnumInput<T1, T2> };
export type GenericStructWithEnumOutput<T1, T2> = { a: T1, b: GenericEnumOutput<T1, T2> };
export type MyStructInput = { x: BigNumberish, y: BigNumberish, state: MyEnumInput };
export type MyStructOutput = { x: number, y: number, state: MyEnumOutput };
export type StructWithMultiOptionInput = { multiple: [Option<BigNumberish>, Option<BigNumberish>, Option<BigNumberish>, Option<BigNumberish>, Option<BigNumberish>] };
export type StructWithMultiOptionOutput = { multiple: [Option<number>, Option<number>, Option<number>, Option<number>, Option<number>] };

interface MyContractAbiInterface extends Interface {
  functions: {
    type_address: FunctionFragment;
    type_contract_id: FunctionFragment;
    type_external_enum: FunctionFragment;
    type_external_struct: FunctionFragment;
    type_identity: FunctionFragment;
    types_array: FunctionFragment;
    types_asset_id: FunctionFragment;
    types_b256: FunctionFragment;
    types_b512: FunctionFragment;
    types_bool: FunctionFragment;
    types_bytes: FunctionFragment;
    types_empty: FunctionFragment;
    types_empty_then_value: FunctionFragment;
    types_enum: FunctionFragment;
    types_enum_with_vector: FunctionFragment;
    types_evm_address: FunctionFragment;
    types_generic_enum: FunctionFragment;
    types_generic_struct: FunctionFragment;
    types_option: FunctionFragment;
    types_option_geo: FunctionFragment;
    types_raw_slice: FunctionFragment;
    types_result: FunctionFragment;
    types_std_string: FunctionFragment;
    types_str: FunctionFragment;
    types_str_slice: FunctionFragment;
    types_struct: FunctionFragment;
    types_tuple: FunctionFragment;
    types_u16: FunctionFragment;
    types_u256: FunctionFragment;
    types_u32: FunctionFragment;
    types_u64: FunctionFragment;
    types_u8: FunctionFragment;
    types_value_then_empty: FunctionFragment;
    types_value_then_empty_then_value: FunctionFragment;
    types_vector_geo: FunctionFragment;
    types_vector_option: FunctionFragment;
    types_vector_u8: FunctionFragment;
  };
}

export class MyContractAbi extends Contract {
  interface: MyContractAbiInterface;
  functions: {
    type_address: InvokeFunction<[x: AddressInput], AddressOutput>;
    type_contract_id: InvokeFunction<[x: ContractIdInput], ContractIdOutput>;
    type_external_enum: InvokeFunction<[x: ExternalEnumInput], ExternalEnumOutput>;
    type_external_struct: InvokeFunction<[x: ExternalStructInput], ExternalStructOutput>;
    type_identity: InvokeFunction<[x: IdentityInput], IdentityOutput>;
    types_array: InvokeFunction<[x: [BigNumberish, BigNumberish, BigNumberish]], [number, number, number]>;
    types_asset_id: InvokeFunction<[x: AssetIdInput], AssetIdOutput>;
    types_b256: InvokeFunction<[x: string], string>;
    types_b512: InvokeFunction<[x: string], string>;
    types_bool: InvokeFunction<[x: boolean], boolean>;
    types_bytes: InvokeFunction<[x: Bytes], Bytes>;
    types_empty: InvokeFunction<[], void>;
    types_empty_then_value: InvokeFunction<[y: BigNumberish], void>;
    types_enum: InvokeFunction<[x: MyEnumInput], MyEnumOutput>;
    types_enum_with_vector: InvokeFunction<[x: EnumWithVectorInput], EnumWithVectorOutput>;
    types_evm_address: InvokeFunction<[x: EvmAddress], EvmAddress>;
    types_generic_enum: InvokeFunction<[x: GenericEnumInput<BigNumberish, BigNumberish>], GenericEnumOutput<number, number>>;
    types_generic_struct: InvokeFunction<[x: GenericStructWithEnumInput<BigNumberish, BigNumberish>], GenericStructWithEnumOutput<number, number>>;
    types_option: InvokeFunction<[x: Option<BigNumberish>], Option<number>>;
    types_option_geo: InvokeFunction<[x: Option<MyStructInput>], Option<MyStructOutput>>;
    types_raw_slice: InvokeFunction<[x: RawSlice], RawSlice>;
    types_result: InvokeFunction<[x: Result<BigNumberish, BigNumberish>], Result<BN, string>>;
    types_std_string: InvokeFunction<[x: StdString], StdString>;
    types_str: InvokeFunction<[x: string], string>;
    types_str_slice: InvokeFunction<[x: StrSlice], StrSlice>;
    types_struct: InvokeFunction<[x: MyStructInput], MyStructOutput>;
    types_tuple: InvokeFunction<[x: [BigNumberish, BigNumberish, BigNumberish]], [number, number, number]>;
    types_u16: InvokeFunction<[x: BigNumberish], number>;
    types_u256: InvokeFunction<[x: BigNumberish], BN>;
    types_u32: InvokeFunction<[x: BigNumberish], number>;
    types_u64: InvokeFunction<[x: BigNumberish], BN>;
    types_u8: InvokeFunction<[x: BigNumberish], number>;
    types_value_then_empty: InvokeFunction<[x: BigNumberish], void>;
    types_value_then_empty_then_value: InvokeFunction<[x: BigNumberish, z: BigNumberish], void>;
    types_vector_geo: InvokeFunction<[x: Vec<MyStructInput>], Vec<MyStructOutput>>;
    types_vector_option: InvokeFunction<[x: Vec<StructWithMultiOptionInput>], Vec<StructWithMultiOptionOutput>>;
    types_vector_u8: InvokeFunction<[x: Vec<BigNumberish>], Vec<number>>;
  };
}
