/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import { Interface, Contract } from "fuels";
import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import type { MyContractAbi, MyContractAbiInterface } from "../MyContractAbi";

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "str[10]",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "x",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "y",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      }
    }
  ],
  "loggedTypes": [],
  "messagesTypes": []
}

export class MyContractAbi__factory {
  static readonly abi = _abi
  static createInterface(): MyContractAbiInterface {
    return new Interface(_abi) as unknown as MyContractAbiInterface
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): MyContractAbi {
    return new Contract(id, _abi, walletOrProvider) as unknown as MyContractAbi
  }
}
