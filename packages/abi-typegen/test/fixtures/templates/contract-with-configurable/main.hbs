/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option } from "./common";

export type GenericStructInput<T1, T2> = { p1: T1, p2: T2 };
export type GenericStructOutput<T1, T2> = GenericStructInput<T1, T2>;

export type MyContractConfigurables = Partial<{
  SHOULD_RETURN: boolean;
  AN_OPTION: Option<BigNumberish>;
  A_GENERIC_STRUCT: GenericStructInput<GenericStructInput<BigNumberish, BigNumberish>, BigNumberish>;
}>;

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 3,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "typeId": 3,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "generic T1",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "generic T2",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "str[10]",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct GenericStruct",
      "components": [
        {
          "name": "p1",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "p2",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        4,
        5
      ]
    },
    {
      "typeId": 8,
      "type": "u16",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "u32",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "x",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "y",
          "type": 6,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SHOULD_RETURN",
      "configurableType": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "offset": 2576
    },
    {
      "name": "AN_OPTION",
      "configurableType": {
        "name": "",
        "type": 2,
        "typeArguments": [
          {
            "name": "",
            "type": 10,
            "typeArguments": null
          }
        ]
      },
      "offset": 2560
    },
    {
      "name": "A_GENERIC_STRUCT",
      "configurableType": {
        "name": "",
        "type": 7,
        "typeArguments": [
          {
            "name": "",
            "type": 7,
            "typeArguments": [
              {
                "name": "",
                "type": 10,
                "typeArguments": null
              },
              {
                "name": "",
                "type": 8,
                "typeArguments": null
              }
            ]
          },
          {
            "name": "",
            "type": 9,
            "typeArguments": null
          }
        ]
      },
      "offset": 2568
    }
  ]
};

const storageSlots: StorageSlot[] = [];

export class MyContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    main: FunctionFragment;
  };
}

export class MyContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: MyContractInterface;
  declare functions: {
    main: InvokeFunction<[x: string, y: string], boolean>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
