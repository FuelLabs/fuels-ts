/* Autogenerated file. Do not edit manually. */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import { Contract, Interface } from "fuels";
import type { Provider, Account, StorageSlot, AbstractAddress } from "fuels";

import type {
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

export type MyContractConfigurables = {
  SHOULD_RETURN: boolean;
};

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "str[10]",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "x",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "y",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SHOULD_RETURN",
      "configurableType": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "offset": 1664
    }
  ]
};

const storageSlots: StorageSlot[] = [];

export class MyContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    main: FunctionFragment;
  };
}

export class MyContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: MyContractInterface;
  declare functions: {
    main: InvokeFunction<[x: string, y: string], boolean>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
