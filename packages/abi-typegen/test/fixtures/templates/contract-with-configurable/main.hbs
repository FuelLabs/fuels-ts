/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option } from "./common";

export type GenericStructInput<T1, T2> = { p1: T1, p2: T2 };
export type GenericStructOutput<T1, T2> = GenericStructInput<T1, T2>;

export type MyContractConfigurables = Partial<{
  SHOULD_RETURN: boolean;
  AN_OPTION: Option<BigNumberish>;
  A_GENERIC_STRUCT: GenericStructInput<GenericStructInput<BigNumberish, BigNumberish>, BigNumberish>;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum std::option::Option<u8>",
      "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "metadataTypeId": 1,
      "typeArguments": [
        "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
      ]
    },
    {
      "type": "str[10]",
      "concreteTypeId": "338a25cb65b9251663dcce6362b744fe10aa849758299590f4efed5dd299bf50"
    },
    {
      "type": "struct GenericStruct<struct GenericStruct<u8,u16>,u32>",
      "concreteTypeId": "71df88006611ffff852cf617defb70f77adaf507305088cedd41d276c783aab0",
      "metadataTypeId": 5,
      "typeArguments": [
        "14dc991834d10c7c7207ad065a8f30dd47d2a2554c97749264d18e1bb3fcf7d6",
        "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
      ]
    },
    {
      "type": "struct GenericStruct<u8,u16>",
      "concreteTypeId": "14dc991834d10c7c7207ad065a8f30dd47d2a2554c97749264d18e1bb3fcf7d6",
      "metadataTypeId": 5,
      "typeArguments": [
        "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b",
        "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
      ]
    },
    {
      "type": "u16",
      "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef"
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "None",
          "typeId": 0
        },
        {
          "name": "Some",
          "typeId": 2
        }
      ],
      "typeParameters": [
        2
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 2
    },
    {
      "type": "generic T1",
      "metadataTypeId": 3
    },
    {
      "type": "generic T2",
      "metadataTypeId": 4
    },
    {
      "type": "struct GenericStruct",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "p1",
          "typeId": 3
        },
        {
          "name": "p2",
          "typeId": 4
        }
      ],
      "typeParameters": [
        3,
        4
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "x",
          "concreteTypeId": "338a25cb65b9251663dcce6362b744fe10aa849758299590f4efed5dd299bf50"
        },
        {
          "name": "y",
          "concreteTypeId": "338a25cb65b9251663dcce6362b744fe10aa849758299590f4efed5dd299bf50"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "SHOULD_RETURN",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "offset": 2720
    },
    {
      "name": "AN_OPTION",
      "concreteTypeId": "2da102c46c7263beeed95818cd7bee801716ba8303dddafdcd0f6c9efda4a0f1",
      "offset": 2696
    },
    {
      "name": "A_GENERIC_STRUCT",
      "concreteTypeId": "71df88006611ffff852cf617defb70f77adaf507305088cedd41d276c783aab0",
      "offset": 2712
    }
  ]
};

const storageSlots: StorageSlot[] = [];

export class MyContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    main: FunctionFragment;
  };
}

export class MyContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: MyContractInterface;
  declare functions: {
    main: InvokeFunction<[x: string, y: string], boolean>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
