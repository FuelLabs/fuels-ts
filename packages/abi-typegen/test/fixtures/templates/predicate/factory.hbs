/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import {
  BigNumberish,
  BN,
  InputValue,
  Predicate,
  Provider,
} from 'fuels';

import type { Option, Enum, Vec, Result } from "../common";

export type MyGenericEnumInput<T> = Enum<{ a: T }>;
export type MyGenericEnumOutput<T> = MyGenericEnumInput<T>;

export type MyGenericStructInput<T> = { a: T };
export type MyGenericStructOutput<T> = MyGenericStructInput<T>;
export type ValidationInput = { has_account: boolean, total_complete: BigNumberish };
export type ValidationOutput = { has_account: boolean, total_complete: BN };

export type MyPredicateAbiConfigurables = Partial<{
}>;

export type MyPredicateAbiInputs = [vec: Vec<ValidationInput>, enm: MyGenericEnumInput<BigNumberish>, opt: Option<BigNumberish>, res: Result<MyGenericStructInput<string>, BigNumberish>];

const _abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "enum MyGenericEnum",
      "components": [
        {
          "name": "a",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "typeId": 2,
      "type": "enum std::option::Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "typeId": 3,
      "type": "enum std::result::Result",
      "components": [
        {
          "name": "Ok",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "Err",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5,
        4
      ]
    },
    {
      "typeId": 4,
      "type": "generic E",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "raw untyped ptr",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "struct MyGenericStruct",
      "components": [
        {
          "name": "a",
          "type": 5,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "typeId": 8,
      "type": "struct Validation",
      "components": [
        {
          "name": "has_account",
          "type": 11,
          "typeArguments": null
        },
        {
          "name": "total_complete",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "struct std::vec::RawVec",
      "components": [
        {
          "name": "ptr",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "typeId": 10,
      "type": "struct std::vec::Vec",
      "components": [
        {
          "name": "buf",
          "type": 9,
          "typeArguments": [
            {
              "name": "",
              "type": 5,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": 12,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "typeId": 11,
      "type": "bool",
      "components": null,
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "u64",
      "components": null,
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "u16",
      "components": null,
      "concreteTypeId": "29881aad8730c5ab11d275376323d8e4ff4179aae8ccb6c13fe4902137e162ef",
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "u8",
      "components": null,
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b",
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "str[4]",
      "components": null,
      "concreteTypeId": "94f0fa95c830be5e4f711963e83259fe7e8bc723278ab6ec34449e791a99b53a",
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "vec",
          "type": 10,
          "typeArguments": [
            {
              "name": "",
              "type": 8,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "enm",
          "type": 1,
          "typeArguments": [
            {
              "name": "",
              "type": 13,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "opt",
          "type": 2,
          "typeArguments": [
            {
              "name": "",
              "type": 14,
              "typeArguments": null
            }
          ]
        },
        {
          "name": "res",
          "type": 3,
          "typeArguments": [
            {
              "name": "",
              "type": 7,
              "typeArguments": [
                {
                  "name": "",
                  "type": 15,
                  "typeArguments": null
                }
              ]
            },
            {
              "name": "",
              "type": 12,
              "typeArguments": null
            }
          ]
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": 11,
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
}

const _bin = '0x000'

export const MyPredicateAbi__factory = {

  abi: _abi,
  bin: _bin,

  createInstance(provider: Provider, predicateData?: MyPredicateAbiInputs, configurables?: MyPredicateAbiConfigurables) {

    const predicate = new Predicate<MyPredicateAbiInputs>({
      bytecode: _bin,
      abi: _abi,
      provider,
      inputData: predicateData,
      configurableConstants: configurables,
    })

    return predicate;

  }

}
