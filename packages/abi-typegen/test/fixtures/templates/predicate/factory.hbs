/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import {
  BigNumberish,
  BN,
  InputValue,
  Predicate,
  Provider,
} from 'fuels';

import type { Option, Enum, Vec, Result } from "../common";

export type MyGenericEnumInput<T> = Enum<{ a: T }>;
export type MyGenericEnumOutput<T> = MyGenericEnumInput<T>;

export type MyGenericStructInput<T> = { a: T };
export type MyGenericStructOutput<T> = MyGenericStructInput<T>;
export type ValidationInput = { has_account: boolean, total_complete: BigNumberish };
export type ValidationOutput = { has_account: boolean, total_complete: BN };

export type MyPredicateAbiConfigurables = {
};

export type MyPredicateAbiInputs = [vec: Vec<ValidationInput>, enm: MyGenericEnumInput<BigNumberish>, opt: Option<BigNumberish>, res: Result<MyGenericStructInput<string>, BigNumberish>];

const _abi = {
  "abiVersion": "1",
  "specVersion": "1",
  "encoding": "1",
  "types": [
    {
      "type": "()",
      "components": [],
      "typeId": "0",
      "typeParameters": null
    },
    {
      "type": "bool",
      "components": null,
      "typeId": "1",
      "typeParameters": null
    },
    {
      "type": "enum MyGenericEnum",
      "components": [
        {
          "name": "a",
          "type": "6",
          "typeArguments": null
        }
      ],
      "typeId": "2",
      "typeParameters": [
        "6"
      ]
    },
    {
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": "0",
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": "6",
          "typeArguments": null
        }
      ],
      "typeId": "3",
      "typeParameters": [
        "6"
      ]
    },
    {
      "type": "enum Result",
      "components": [
        {
          "name": "Ok",
          "type": "6",
          "typeArguments": null
        },
        {
          "name": "Err",
          "type": "5",
          "typeArguments": null
        }
      ],
      "typeId": "4",
      "typeParameters": [
        "6",
        "5"
      ]
    },
    {
      "type": "generic E",
      "components": null,
      "typeId": "5",
      "typeParameters": null
    },
    {
      "type": "generic T",
      "components": null,
      "typeId": "6",
      "typeParameters": null
    },
    {
      "type": "raw untyped ptr",
      "components": null,
      "typeId": "7",
      "typeParameters": null
    },
    {
      "type": "str[4]",
      "components": null,
      "typeId": "8",
      "typeParameters": null
    },
    {
      "type": "struct MyGenericStruct",
      "components": [
        {
          "name": "a",
          "type": "6",
          "typeArguments": null
        }
      ],
      "typeId": "9",
      "typeParameters": [
        "6"
      ]
    },
    {
      "type": "struct RawVec",
      "components": [
        {
          "name": "ptr",
          "type": "7",
          "typeArguments": null
        },
        {
          "name": "cap",
          "type": "14",
          "typeArguments": null
        }
      ],
      "typeId": "10",
      "typeParameters": [
        "6"
      ]
    },
    {
      "type": "struct Validation",
      "components": [
        {
          "name": "has_account",
          "type": "1",
          "typeArguments": null
        },
        {
          "name": "total_complete",
          "type": "14",
          "typeArguments": null
        }
      ],
      "typeId": "11",
      "typeParameters": null
    },
    {
      "type": "struct Vec",
      "components": [
        {
          "name": "buf",
          "type": "10",
          "typeArguments": [
            {
              "name": "",
              "type": "6",
              "typeArguments": null
            }
          ]
        },
        {
          "name": "len",
          "type": "14",
          "typeArguments": null
        }
      ],
      "typeId": "12",
      "typeParameters": [
        "6"
      ]
    },
    {
      "type": "u16",
      "components": null,
      "typeId": "13",
      "typeParameters": null
    },
    {
      "type": "u64",
      "components": null,
      "typeId": "14",
      "typeParameters": null
    },
    {
      "type": "u8",
      "components": null,
      "typeId": "15",
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "vec",
          "type": "12",
          "typeArguments": [
            {
              "name": "",
              "type": "11",
              "typeArguments": null
            }
          ]
        },
        {
          "name": "enm",
          "type": "2",
          "typeArguments": [
            {
              "name": "",
              "type": "13",
              "typeArguments": null
            }
          ]
        },
        {
          "name": "opt",
          "type": "3",
          "typeArguments": [
            {
              "name": "",
              "type": "15",
              "typeArguments": null
            }
          ]
        },
        {
          "name": "res",
          "type": "4",
          "typeArguments": [
            {
              "name": "",
              "type": "9",
              "typeArguments": [
                {
                  "name": "",
                  "type": "8",
                  "typeArguments": null
                }
              ]
            },
            {
              "name": "",
              "type": "14",
              "typeArguments": null
            }
          ]
        }
      ],
      "name": "main",
      "output": {
        "name": "",
        "type": "1",
        "typeArguments": null
      },
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
}

const _bin = '0x000'

export const MyPredicateAbi__factory = {

  abi: _abi,
  bin: _bin,

  createInstance(provider: Provider, predicateData?: MyPredicateAbiInputs, configurables?: MyPredicateAbiConfigurables) {

    const predicate = new Predicate<MyPredicateAbiInputs>({
      bytecode: _bin,
      abi: _abi,
      provider,
      inputData: predicateData,
      configurableConstants: configurables,
    })

    return predicate;

  }

}
