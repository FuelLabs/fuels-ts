/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 11.11.11
  Forc version: 22.22.22
  Fuel-Core version: 33.33.33
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Vec } from "./common";

export type InternalStructInput = { a: BigNumberish };
export type InternalStructOutput = { a: number };
export type ExternalStructInput = { value: BigNumberish };
export type ExternalStructOutput = { value: BN };
export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;

interface MyContractAbiInterface extends Interface {
  functions: {
    type_address: FunctionFragment;
    type_external_struct: FunctionFragment;
    type_internal_struct: FunctionFragment;
    type_vector_u8: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'type_address', values: [AddressInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'type_external_struct', values: [ExternalStructInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'type_internal_struct', values: [InternalStructInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'type_vector_u8', values: [Vec<BigNumberish>]): Uint8Array;

  decodeFunctionData(functionFragment: 'type_address', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'type_external_struct', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'type_internal_struct', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'type_vector_u8', data: BytesLike): DecodedValue;
}

export class MyContractAbi extends Contract {
  interface: MyContractAbiInterface;
  functions: {
    type_address: InvokeFunction<[x: AddressInput], AddressOutput>;
    type_external_struct: InvokeFunction<[x: ExternalStructInput], ExternalStructOutput>;
    type_internal_struct: InvokeFunction<[x: InternalStructInput], InternalStructOutput>;
    type_vector_u8: InvokeFunction<[x: Vec<BigNumberish>], Vec<number>>;
  };
}
