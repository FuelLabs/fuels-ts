{{header}}

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels'

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";`;
{{/if}}


{{#each enums}}
export type {{this.structName}}Input = Enum<{ {{this.inputValues}} }>
{{#if this.recycleRef}}
export type {{this.structName}}Output = {{structName}}Input`;
{{else}}
export type {{this.structName}}Output = Enum<{ {{this.outputValues}} }>
{{/if}}
{{/each}}


{{#each structs}}
export type {{this.structName}}Input{{this.typeAnnotations}} = {{this.inputValues}};
export type {{this.structName}}Output{{this.typeAnnotations}} = {{this.outputValues}};
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  }

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{this.functionName}}', values: [{{this.input}}]): Uint8Array`;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{this.functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface
  functions: {
    {{#each functionsTypedefs}}
    {{this}}
    {{/each}}
  }
}
