import { versions } from '@fuel-ts/versions';

import { renderHbsTemplate } from './renderHbsTemplate';

describe('renderHbsTemplate.ts', () => {
  const original = { ...versions };
  afterEach(() => {
    Object.assign(versions, original);
  });

  test('should render given template w/ data while injecting header', () => {
    // mocking
    const FUELS = '11.11.11';
    const FORC = '22.22.22';
    const FUEL_CORE = '33.33.33';

    Object.assign(versions, { FUELS, FORC, FUEL_CORE });

    // executing
    const template = `{{header}}\nHello, {{project}}!`;
    const data = { project: 'Fuel' };
    const rendered = renderHbsTemplate({ template, data });

    // validating
    expect(rendered).toMatch(/Autogenerated file/g);
    expect(rendered).toMatch(/tslint:disable/g);
    expect(rendered).toMatch(/eslint-disable/g);
    expect(rendered).toMatch(new RegExp(`Fuels version: ${FUELS}`, 'gm'));
    expect(rendered).toMatch(new RegExp(`Forc version: ${FORC}`, 'gm'));
    expect(rendered).toMatch(new RegExp(`Fuel-Core version: ${FUEL_CORE}`, 'gm'));

    expect(rendered).toMatch(/Hello, Fuel!/g);
  });
});
