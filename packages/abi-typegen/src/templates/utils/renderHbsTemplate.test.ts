import { versions } from '@fuel-ts/versions';

import { renderHbsTemplate } from './renderHbsTemplate';

describe('renderHbsTemplate.ts', () => {
  test('should render given template w/ data while injecting header', () => {
    // backip up original values
    const backup = { ...versions };

    // mocking
    const FUELS = '11.11.11';
    const FORC = '22.22.22';
    const FUEL_CORE = '33.33.33';

    // jest.mock('@fuel-ts/versions', () => ({ versions }));
    versions.FUELS = FUELS;
    versions.FORC = FORC;
    versions.FUEL_CORE = FUEL_CORE;

    // executing
    const template = `{{header}}\nHello, {{project}}!`;
    const data = { project: 'Fuel' };
    const rendered = renderHbsTemplate({ template, data });

    // restoring
    versions.FUELS = backup.FUELS;
    versions.FORC = backup.FORC;
    versions.FUEL_CORE = backup.FUEL_CORE;

    // validating
    expect(rendered).toMatch(/Autogenerated file/g);
    expect(rendered).toMatch(/tslint:disable/g);
    expect(rendered).toMatch(/eslint-disable/g);
    expect(rendered).toMatch(new RegExp(`Fuels version: ${FUELS}`, 'gm'));
    expect(rendered).toMatch(new RegExp(`Forc version: ${FORC}`, 'gm'));
    expect(rendered).toMatch(new RegExp(`Fuel-Core version: ${FUEL_CORE}`, 'gm'));

    expect(rendered).toMatch(/Hello, Fuel!/g);
  });
});
