{{header}}

{{#if imports}}
import {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "../common";
{{/if}}


{{#each enums}}
{{#if inputNativeValues}}
export enum {{inputLabel}} { {{inputNativeValues}} };
{{else}}
export type {{inputLabel}} = Enum<{ {{inputValues}} }>;
{{/if}}
{{#if outputNativeValues}}
export enum {{outputLabel}} { {{outputNativeValues}} };
{{else}}
  {{#if recycleRef}}
export type {{outputLabel}} = {{inputLabel}};
  {{else}}
export type {{outputLabel}} = Enum<{ {{outputValues}} }>;
  {{/if}}
{{/if}}
{{/each}}


{{#each structs}}
export type {{inputLabel}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{outputLabel}} = {{inputLabel}};
{{else}}
export type {{outputLabel}} = { {{outputValues}} };
{{/if}}
{{/each}}

export type {{capitalizedName}}Configurables = Partial<{
{{#each formattedConfigurables}}
  {{configurableName}}: {{configurableType}};
{{/each}}
}>;

export type {{capitalizedName}}Inputs = [{{inputs}}];

const _abi = {{abiJsonString}} as JsonAbi;

const _bin = '{{hexlifiedBinString}}'

export const {{capitalizedName}}__factory = {

  abi: _abi,
  bin: _bin,

  createInstance(provider: Provider, predicateData?: {{capitalizedName}}Inputs, configurables?: {{capitalizedName}}Configurables) {

    const predicate = new Predicate<{{capitalizedName}}Inputs>({
      bytecode: _bin,
      abi: _abi,
      provider,
      inputData: predicateData,
      configurableConstants: configurables,
    })

    return predicate;

  }

}
