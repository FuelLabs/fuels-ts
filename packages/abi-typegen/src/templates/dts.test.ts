import { enumOnly, full, minimal, optionOnly } from '../../test/fixtures';
import { compileSwayToJson } from '../../test/utils/compileSwayContract';
import { Abi } from '../abi/Abi';

import { renderDtsTemplate } from './dts';

const expectedRenderedTemplate = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels'

interface MyContractAbiInterface extends Interface {
  functions: {
    hello: FunctionFragment;
  }

  encodeFunctionData(functionFragment: 'hello', values: [string]): Uint8Array

  decodeFunctionData(functionFragment: 'hello', data: BytesLike): DecodedValue
}

export class MyContractAbi extends Contract {
  interface: MyContractAbiInterface
  functions: {
    hello: InvokeFunction<[string], string>;
  }
}`;

describe('templates/dts', () => {
  test('should render dts template', () => {
    const { rawContents } = compileSwayToJson({ contractPath: minimal });

    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toEqual(expectedRenderedTemplate);
  });

  test('should render dts template w/ eums', () => {
    const { rawContents } = compileSwayToJson({ contractPath: enumOnly });
    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    const reg = /import type \{ Enum \}/g;

    expect(rendered).toMatch(reg);
    expect(rendered).not.toMatch(/import type \{ Option \}/g);
    expect(rendered).not.toMatch(/import type \{ Enum, Option \}/g);
  });

  test('should render dts template w/ option', () => {
    const { rawContents } = compileSwayToJson({ contractPath: optionOnly });

    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toMatch(/import type \{ Option \}/g);
    expect(rendered).not.toMatch(/import type \{ Enum \}/g);
    expect(rendered).not.toMatch(/import type \{ Enum, Option \}/g);
  });

  test('should render dts template w/ enum and option', () => {
    const { rawContents } = compileSwayToJson({ contractPath: full });

    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toMatch(/import type \{ Enum, Option \}/g);
  });
});
