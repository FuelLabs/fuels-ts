import { contractPaths } from '../../test/fixtures';
import { compileSwayToJson } from '../../test/utils/sway/compileSwayToJson';
import { Abi } from '../Abi';
import { getPackageVersion } from '../utils/getPackageVersion';

import { renderDtsTemplate } from './dts';

const expectedRenderedTemplate = `/* Autogenerated file. Do not edit manually. */
/* Fuels version: {FUELS_VERSION} */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels'

interface MyContractAbiInterface extends Interface {
  functions: {
    hello: FunctionFragment;
  }

  encodeFunctionData(functionFragment: 'hello', values: [string, string]): Uint8Array

  decodeFunctionData(functionFragment: 'hello', data: BytesLike): DecodedValue
}

export class MyContractAbi extends Contract {
  interface: MyContractAbiInterface
  functions: {
    hello: InvokeFunction<[first: string, last: string], boolean>;
  }
}`;

describe('templates/dts', () => {
  test('should render dts template', () => {
    const contractPath = contractPaths.minimal;
    const { rawContents } = compileSwayToJson({ contractPath });

    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    const { version: fuelsVersion } = getPackageVersion();

    expect(rendered).toEqual(expectedRenderedTemplate.replace('{FUELS_VERSION}', fuelsVersion));
  });

  test('should render dts template w/ custom common types', () => {
    const contractPath = contractPaths.full;
    const { rawContents } = compileSwayToJson({ contractPath });
    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toMatch(/^import type.+from ".\/common";$/m);
  });

  test('should render dts cross-referencing for identical structs', () => {
    const contractPath = contractPaths.structSimple;
    const { rawContents } = compileSwayToJson({ contractPath });
    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toMatch(/export type BOutput<T> = BInput<T>;$/m);
  });

  test('should render dts cross-referencing for identical enums', () => {
    const contractPath = contractPaths.enumSimple;
    const { rawContents } = compileSwayToJson({ contractPath });
    const abi = new Abi({
      filepath: './my-contract-abi.json',
      outputDir: 'stdout',
      rawContents,
    });

    const rendered = renderDtsTemplate({ abi });
    expect(rendered).toMatch(/export type MyEnumOutput = MyEnumInput;$/m);
  });
});
