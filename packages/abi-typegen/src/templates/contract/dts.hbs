{{header}}

{{#if imports}}
import type {
{{#each imports}}
  {{this}},
{{/each}}
} from 'fuels';
{{/if}}

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
{{#if inputNativeValues}}
export enum {{inputLabel}} { {{inputNativeValues}} };
{{else}}
export type {{inputLabel}} = Enum<{ {{inputValues}} }>;
{{/if}}
{{#if outputNativeValues}}
export enum {{outputLabel}} { {{outputNativeValues}} };
{{else}}
  {{#if recycleRef}}
export type {{outputLabel}} = {{inputLabel}};
  {{else}}
export type {{outputLabel}} = Enum<{ {{outputValues}} }>;
  {{/if}}
{{/if}}
{{/each}}


{{#each structs}}
export type {{inputLabel}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{outputLabel}} = {{inputLabel}};
{{else}}
export type {{outputLabel}} = { {{outputValues}} };
{{/if}}
{{/each}}

{{#if formattedConfigurables}}
export type {{capitalizedName}}Configurables = Partial<{
{{#each formattedConfigurables}}
  {{configurableName}}: {{configurableType}};
{{/each}}
}>;
{{/if}}

export interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
