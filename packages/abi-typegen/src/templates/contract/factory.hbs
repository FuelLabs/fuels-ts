{{header}}

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
  static async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<{{capitalizedName}}> {
    const factory = new ContractFactory(bytecode, _abi, wallet);
    const contract = await factory.deployContract(options);
    return contract as unknown as {{capitalizedName}};
  }
}
