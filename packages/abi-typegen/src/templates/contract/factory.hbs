{{header}}

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { {{capitalizedName}} } from "./{{capitalizedName}}";

const bytecode = decompressBytecode("{{compressedBytecode}}");

export class {{capitalizedName}}Factory extends ContractFactory<{{capitalizedName}}> {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(
      bytecode,
      {{capitalizedName}}.abi,
      accountOrProvider,
      { storageSlots: {{capitalizedName}}.storageSlots }
    );
  }

  static deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): ReturnType<{{capitalizedName}}Factory['deploy']> {
    const factory = new {{capitalizedName}}Factory(wallet);
    return factory.deploy(options);
  }
}
