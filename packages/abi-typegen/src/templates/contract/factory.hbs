{{header}}

import { ContractFactory } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { {{capitalizedName}} } from "./{{capitalizedName}}";

const bytecode = "{{hexlifiedBinString}}";

export class {{capitalizedName}}Factory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, {{capitalizedName}}.abi, accountOrProvider);
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<{{capitalizedName}}>> {
    const factory = new {{capitalizedName}}Factory(wallet);

    return factory.deploy({
      storageSlots: {{capitalizedName}}.storageSlots,
      ...options,
    });
  }
}
