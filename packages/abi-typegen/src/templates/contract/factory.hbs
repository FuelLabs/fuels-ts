{{header}}

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions, StorageSlot, DeployContractResult } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}};

const _storageSlots: StorageSlot[] = {{storageSlotsJsonString}};

export const {{capitalizedName}}__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<{{capitalizedName}}>> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    return factory.deployContract<{{capitalizedName}}>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
}
