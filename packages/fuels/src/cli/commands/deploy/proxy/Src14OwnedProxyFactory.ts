/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  This file was generated by the Fuels CLI and manually modified for internal use.

  The source of this contract is located at:
  https://github.com/FuelLabs/sway-standard-implementations/tree/master/src14/owned_proxy

  The versions used to generate this file are:

  Fuels version: 0.94.6
  Forc version: 0.63.5
  Fuel-Core version: 0.35.0
*/

import type { Provider, Account } from '@fuel-ts/account';
import { ContractFactory } from '@fuel-ts/contract';
import type { DeployContractOptions, DeployContractResult } from '@fuel-ts/contract';
import { Contract } from '@fuel-ts/program';
import { decompressBytecode } from '@fuel-ts/utils';

import { Src14OwnedProxy } from './Src14OwnedProxy';

const bytecode = decompressBytecode(
  ''
);

export class Src14OwnedProxyFactory extends ContractFactory {
  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Src14OwnedProxy.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: Src14OwnedProxy.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy(
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<Src14OwnedProxy>> {
    const factory = new Src14OwnedProxyFactory(wallet);
    return factory.deploy(options);
  }
}
