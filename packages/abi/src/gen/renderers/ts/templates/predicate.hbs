{{header}}

import { Predicate } from 'fuels';
import type { PredicateParams } from 'fuels';
import { abi } from './{{name}}-abi';
import { bytecode } from './{{name}}-bytecode';
import type { {{name}}Types as Types } from './{{name}}Types';

export * from './{{name}}Types';

export type {{name}}Inputs = Types['inputs'];
export type {{name}}Output = Types['output'];
export type {{name}}Configurables = Types['configurables'];

export type {{name}}Parameters = Omit<
  PredicateParams<
    Types['inputs'],
    Types['configurables']
  >,
  'abi' | 'bytecode'
>;

export class {{name}} extends Predicate<
  Types['inputs'],
  Types['configurables']
> {
    public static readonly abi = abi;
    public static readonly bytecode = bytecode;

    constructor(params: {{name}}Parameters) {
      super({ abi, bytecode, ...params });
    }
}