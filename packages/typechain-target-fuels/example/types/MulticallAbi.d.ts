/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type CallParametersInput = {
  amount: OptionalU64Input;
  asset_id: OptionalContractIdInput;
  gas: OptionalU64Input;
};

export type CallParametersOutput = {
  amount: OptionalU64Output;
  asset_id: OptionalContractIdOutput;
  gas: OptionalU64Output;
};

export type MulticallCallInput = {
  contract_id: ContractIdInput;
  fn_selector: BigNumberish;
  fn_arg: CallValueInput;
  parameters: CallParametersInput;
};

export type MulticallCallOutput = {
  contract_id: ContractIdOutput;
  fn_selector: BN;
  fn_arg: CallValueOutput;
  parameters: CallParametersOutput;
};

export type ScriptDataInput = {
  calls: [
    OptionalMulticallCallInput,
    OptionalMulticallCallInput,
    OptionalMulticallCallInput,
    OptionalMulticallCallInput,
    OptionalMulticallCallInput
  ];
};

export type ScriptDataOutput = {
  calls: [
    OptionalMulticallCallOutput,
    OptionalMulticallCallOutput,
    OptionalMulticallCallOutput,
    OptionalMulticallCallOutput,
    OptionalMulticallCallOutput
  ];
};

export type ScriptReturnInput = {
  call_returns: [
    OptionalCallValueInput,
    OptionalCallValueInput,
    OptionalCallValueInput,
    OptionalCallValueInput,
    OptionalCallValueInput
  ];
};

export type ScriptReturnOutput = {
  call_returns: [
    OptionalCallValueOutput,
    OptionalCallValueOutput,
    OptionalCallValueOutput,
    OptionalCallValueOutput,
    OptionalCallValueOutput
  ];
};

export type CallValueInput = Enum<{
  Value: BigNumberish;
  Data: [BigNumberish, BigNumberish];
}>;

export type CallValueOutput = Enum<{ Value: BN; Data: [BN, BN] }>;

export type OptionalU64Input = Option<BigNumberish>;

export type OptionalU64Output = Option<BN>;

export type OptionalContractIdInput = Option<ContractIdInput>;

export type OptionalContractIdOutput = Option<ContractIdOutput>;

export type OptionalMulticallCallInput = Option<MulticallCallInput>;

export type OptionalMulticallCallOutput = Option<MulticallCallOutput>;

export type OptionalCallValueInput = Option<CallValueInput>;

export type OptionalCallValueOutput = Option<CallValueOutput>;

interface MulticallAbiInterface extends Interface {
  functions: {
    main: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "main",
    values: [ScriptDataInput]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "main", data: BytesLike): DecodedValue;
}

export class MulticallAbi extends Contract {
  interface: MulticallAbiInterface;
  functions: {
    main: InvokeFunction<[script_data: ScriptDataInput], ScriptReturnOutput>;
  };
}
