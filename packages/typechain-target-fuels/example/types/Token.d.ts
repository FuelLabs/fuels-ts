/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
} from "fuels";

export type Ret0Input = {
  foobar: string;
  barfoo: string;
  addresses: [string, string];
};

export type Ret0Output = {
  foobar: string;
  barfoo: string;
  addresses: [string, string];
};

interface TokenInterface extends Interface {
  functions: {
    mint: FunctionFragment;
    send: FunctionFragment;
    get_balance: FunctionFragment;
    return_array: FunctionFragment;
    return_struct: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, string, [string, BigNumberish]]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, BigNumberish, string, [string, string, BigNumberish]]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_balance",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_array",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "return_struct",
    values: [BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "mint", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "send", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_array",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "return_struct",
    data: BytesLike
  ): DecodedValue;
}

export class Token extends Contract {
  interface: TokenInterface;
  functions: {
    mint: InvokeFunction<
      [
        gas: BigNumberish,
        coins: BigNumberish,
        asset_id: string,
        args: [string, BigNumberish]
      ],
      bigint
    >;

    send: InvokeFunction<
      [
        gas: BigNumberish,
        coins: BigNumberish,
        asset_id: string,
        args: [string, string, BigNumberish]
      ],
      void
    >;

    get_balance: InvokeFunction<[], bigint>;

    return_array: InvokeFunction<[gas: BigNumberish], [string, string]>;

    return_struct: InvokeFunction<[arg0: BigNumberish], Ret0Output>;
  };
}
