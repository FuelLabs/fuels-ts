export enum FuelGaugeProjectsEnum {
  ADVANCED_LOGGING = 'advanced-logging',
  ADVANCED_LOGGING_OTHER_CONTRACT = 'advanced-logging-other-contract',
  ADVANCED_LOGGING_OTHER_CONTRACT_ABI = 'advanced-logging-other-contract-abi',
  AUTH_TESTING_ABI = 'auth_testing_abi',
  AUTH_TESTING_CONTRACT = 'auth_testing_contract',
  BYTES = 'bytes',
  CALL_TEST_CONTRACT = 'call-test-contract',
  CONFIGURABLE_CONTRACT = 'configurable-contract',
  COLLISION_IN_FN_NAMES = 'collision_in_fn_names',
  COVERAGE_CONTRACT = 'coverage-contract',
  GENERIC_TYPES_CONTRACT = 'generic-types-contract',
  LIQUIDITY_POOL = 'liquidity-pool',
  MULTI_TOKEN_CONTRACT = 'multi-token-contract',
  PAYABLE_ANNOTATION = 'payable-annotation',
  PREDICATE_ADDRESS = 'predicate-address',
  PREDICATE_BYTES = 'predicate-bytes',
  PREDICATE_CONDITIONAL_INPUTS = 'predicate-conditional-inputs',
  PREDICATE_FALSE = 'predicate-false',
  PREDICATE_MAIN_ARGS_STRUCT = 'predicate-main-args-struct',
  PREDICATE_MAIN_ARGS_VECTOR = 'predicate-main-args-vector',
  PREDICATE_MULTI_ARGS = 'predicate-multi-args',
  PREDICATE_RAW_SLICE = 'predicate-raw-slice',
  PREDICATE_STD_LIB_STRING = 'predicate-std-lib-string',
  PREDICATE_STRUCT = 'predicate-struct',
  PREDICATE_TRIPLE_SIG = 'predicate-triple-sig',
  PREDICATE_TRUE = 'predicate-true',
  PREDICATE_WITH_CONFIGURABLE = 'predicate-with-configurable',
  PREDICATE_U32 = 'predicate-u32',
  PREDICATE_VECTOR_TYPES = 'predicate-vector-types',
  RAW_SLICE = 'raw-slice',
  REVERT_ERROR = 'revert-error',
  SCRIPT_BYTES = 'script-bytes',
  SCRIPT_MAIN_ARGS = 'script-main-args',
  SCRIPT_MAIN_RETURN_STRUCT = 'script-main-return-struct',
  SCRIPT_MAIN_TWO_ARGS = 'script-main-two-args',
  SCRIPT_STD_LIB_STRING = 'script-std-lib-string',
  SCRIPT_WITH_CONFIGURABLE = 'script-with-configurable',
  SCRIPT_WITH_ARRAY = 'script-with-array',
  SCRIPT_WITH_VECTOR = 'script-with-vector',
  SCRIPT_WITH_VECTOR_ADVANCED = 'script-with-vector-advanced',
  SCRIPT_WITH_VECTOR_MIXED = 'script-with-vector-mixed',
  STD_LIB_STRING = 'std-lib-string',
  STORAGE_TEST_CONTRACT = 'storage-test-contract',
  TOKEN_ABI = 'token_abi',
  TOKEN_CONTRACT = 'token_contract',
  VECTOR_TYPES_CONTRACT = 'vector-types-contract',
  VECTOR_TYPES_SCRIPT = 'vector-types-script',
  VECTORS = 'vectors',
}

export enum AbiTypegenProjectsEnum {
  ARRAY_OF_ENUMS = 'array-of-enums',
  ARRAY_WITH_GENERICS = 'array-with-generics',
  BYTES = 'bytes',
  ENUM_OF_ENUMS = 'enum-of-enums',
  ENUM_OF_STRUCTS = 'enum-of-structs',
  ENUM_SIMPLE = 'enum-simple',
  ENUM_SIMPLE_NATIVE = 'enum-simple-native',
  EVM_ADDRESS = 'evm-address',
  FN_VOID = 'fn-void',
  FULL = 'full',
  MINIMAL = 'minimal',
  MINIMAL_WITH_CONFIGURABLE = 'minimal-with-configurable',
  OPTION_SIMPLE = 'option-simple',
  PREDICATE = 'predicate',
  PREDICATE_WITH_CONFIGURABLE = 'predicate-with-configurable',
  RAW_SLICE = 'raw-slice',
  SCRIPT = 'script',
  SCRIPT_WITH_CONFIGURABLE = 'script-with-configurable',
  STD_STRING = 'std-string',
  STRUCT_NESTED = 'struct-nested',
  STRUCT_SIMPLE = 'struct-simple',
  STRUCT_WITH_ARRAY = 'struct-with-array',
  TUPLE_SIMPLE = 'tuple-simple',
  VECTOR_SIMPLE = 'vector-simple',
}

export enum DocSnippetProjectsEnum {
  COUNTER = 'counter',
  ECHO_ENUM = 'echo-enum',
  LOG_VALUES = 'log-values',
  SUM_SCRIPT = 'sum-script',
  ECHO_VALUES = 'echo-values',
  SIMPLE_TOKEN = 'simple-token',
  SUM_OPTION_U8 = 'sum-option-u8',
  ECHO_U64_ARRAY = 'echo-u64-array',
  RETURN_CONTEXT = 'return-context',
  TOKEN_DEPOSITOR = 'token-depositor',
  SIMPLE_PREDICATE = 'simple-predicate',
  ECHO_CONFIGURABLES = 'echo-configurables',
  TRANSFER_TO_ADDRESS = 'transfer-to-address',
  RETURN_TRUE_PREDICATE = 'return-true-predicate',
  ECHO_EMPLOYEE_DATA_VECTOR = 'echo-employee-data-vector',
  WHITELISTED_ADDRESS_PREDICATE = 'whitelisted-address-predicate',
  ECHO_EVM_ADDRESS = 'echo-evm-address',
  ECHO_BYTES = 'echo-bytes',
  ECHO_RAW_SLICE = 'echo-raw-slice',
  ECHO_STD_STRING = 'echo-std-string',
  SCRIPT_TRANSFER_TO_CONTRACT = 'script-transfer-to-contract',
}
