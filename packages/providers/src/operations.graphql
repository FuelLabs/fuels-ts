# Fragments
fragment transactionFragment on Transaction {
  id
  rawPayload
  status {
    type: __typename
    ... on SubmittedStatus {
      time
    }
    ... on SuccessStatus {
      blockId
      time
      programState
    }
    ... on FailureStatus {
      blockId
      time
      reason
    }
  }
}

fragment receiptFragment on Receipt {
  id
  rawPayload
}

fragment blockFragment on Block {
  id
  height
  producer
  transactions {
    ...transactionFragment
  }
  time
}

fragment coinFragment on Coin {
  id
  owner
  amount
  color
  maturity
  status
  blockCreated
}

# Queries and Mutations
query getVersion {
  version
}

query getChain {
  chain {
    name
    latestBlock {
      ...blockFragment
    }
    baseChainHeight
    peerCount
  }
}

query getTransaction($transactionId: HexString256!) {
  transaction(id: $transactionId) {
    ...transactionFragment
  }
}

query getTransactionWithReceipts($transactionId: HexString256!) {
  transaction(id: $transactionId) {
    ...transactionFragment
    receipts {
      ...receiptFragment
    }
  }
}

query getTransactions(
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  transactions(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}

query getTransactionsByOwner(
  $owner: HexString256!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  transactionsByOwner(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}

query getBlock($blockId: HexString256!) {
  block(id: $blockId) {
    ...blockFragment
  }
}

query getBlocks($after: String, $before: String, $first: Int, $last: Int) {
  blocks(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        ...blockFragment
      }
    }
  }
}

query getCoin($coinId: HexString256!) {
  coin(id: $coinId) {
    ...coinFragment
  }
}

query getCoinsByOwner(
  $owner: HexString256!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  coinsByOwner(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...coinFragment
      }
    }
  }
}

mutation dryRun($encodedTransaction: HexString!) {
  dryRun(tx: $encodedTransaction) {
    ...receiptFragment
  }
}

mutation submit($encodedTransaction: HexString!) {
  submit(tx: $encodedTransaction)
}

mutation startSession {
  startSession
}

mutation endSession($sessionId: ID!) {
  endSession(id: $sessionId)
}

mutation execute($sessionId: ID!, $op: String!) {
  execute(id: $sessionId, op: $op)
}

mutation reset($sessionId: ID!) {
  reset(id: $sessionId)
}
