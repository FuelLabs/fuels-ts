# This file contains the queries used by Provider.
#
# Running `pnpm --filter @fuel-ts/providers build-operations` will
# generate `operations.ts` from this file.

# Fragments
fragment transactionFragment on Transaction {
  id
  rawPayload
  gasPrice
  status {
    type: __typename
    ... on SubmittedStatus {
      time
    }
    ... on SuccessStatus {
      block {
        id
      }
      time
      programState {
        returnType
        data
      }
    }
    ... on FailureStatus {
      block {
        id
      }
      time
      reason
    }
  }
}

fragment receiptFragment on Receipt {
  data
  rawPayload
}

fragment blockFragment on Block {
  id
  header {
    height
    time
  }
  transactions {
    id
  }
}

fragment coinFragment on Coin {
  utxoId
  owner
  amount
  assetId
  maturity
  coinStatus: status
  blockCreated
}

fragment messageFragment on Message {
  amount
  sender
  recipient
  data
  nonce
  messageStatus: status
  daHeight
}

fragment messageProofFragment on MessageProof {
  proofSet
  proofIndex
  sender
  recipient
  nonce
  amount
  data
  signature
  header {
    id
    daHeight
    transactionsCount
    outputMessagesCount
    transactionsRoot
    outputMessagesRoot
    height
    prevRoot
    time
    applicationHash
  }
}

fragment balanceFragment on Balance {
  owner
  amount
  assetId
}

fragment consensusParametersFragment on ConsensusParameters {
  contractMaxSize
  maxInputs
  maxOutputs
  maxWitnesses
  maxGasPerTx
  maxScriptLength
  maxScriptDataLength
  maxStorageSlots
  maxPredicateLength
  maxPredicateDataLength
  gasPriceFactor
  gasPerByte
  maxMessageDataLength
}

fragment chainInfoFragment on ChainInfo {
  name
  baseChainHeight
  peerCount
  consensusParameters {
    ...consensusParametersFragment
  }
  latestBlock {
    ...blockFragment
  }
}

fragment contractBalanceFragment on ContractBalance {
  contract
  amount
  assetId
}

# Queries and Mutations
query getVersion {
  nodeInfo {
    nodeVersion
  }
}

query getInfo {
  nodeInfo {
    nodeVersion
    minGasPrice
  }
}

query getChain {
  chain {
    ...chainInfoFragment
  }
}

query getTransaction($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    ...transactionFragment
  }
}

query getTransactionWithReceipts($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    ...transactionFragment
    receipts {
      ...receiptFragment
    }
  }
}

query getTransactions(
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  transactions(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}

query getTransactionsByOwner(
  $owner: Address!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  transactionsByOwner(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}

query getBlock($blockId: BlockId, $blockHeight: U64) {
  block(id: $blockId, height: $blockHeight) {
    ...blockFragment
  }
}

query getBlockWithTransactions($blockId: BlockId, $blockHeight: U64) {
  block(id: $blockId, height: $blockHeight) {
    ...blockFragment
    transactions {
      ...transactionFragment
    }
  }
}

query getBlocks($after: String, $before: String, $first: Int, $last: Int) {
  blocks(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        ...blockFragment
      }
    }
  }
}

query getCoin($coinId: UtxoId!) {
  coin(utxoId: $coinId) {
    ...coinFragment
  }
}

query getCoins(
  $filter: CoinFilterInput!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  coins(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...coinFragment
      }
    }
  }
}

query getResourcesToSpend(
  $owner: Address!
  $queryPerAsset: [SpendQueryElementInput!]!
  $excludedIds: ExcludeInput
) {
  resourcesToSpend(
    owner: $owner
    queryPerAsset: $queryPerAsset
    excludedIds: $excludedIds
  ) {
    ...coinFragment
    ...messageFragment
  }
}

query getContract($contractId: ContractId!) {
  contract(id: $contractId) {
    bytecode
    id
  }
}

query getContractBalance($contract: ContractId!, $asset: AssetId!) {
  contractBalance(contract: $contract, asset: $asset) {
    ...contractBalanceFragment
  }
}

query getBalance($owner: Address!, $assetId: AssetId!) {
  balance(owner: $owner, assetId: $assetId) {
    ...balanceFragment
  }
}

query getBalances(
  $filter: BalanceFilterInput!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  balances(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...balanceFragment
      }
    }
  }
}

query getMessages(
  $owner: Address!
  $after: String
  $before: String
  $first: Int
  $last: Int
) {
  messages(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    edges {
      node {
        ...messageFragment
      }
    }
  }
}

query getMessageProof($transactionId: TransactionId!, $messageId: MessageId!) {
  messageProof(transactionId: $transactionId, messageId: $messageId) {
    ...messageProofFragment
  }
}

mutation dryRun($encodedTransaction: HexString!, $utxoValidation: Boolean) {
  dryRun(tx: $encodedTransaction, utxoValidation: $utxoValidation) {
    ...receiptFragment
  }
}

mutation submit($encodedTransaction: HexString!) {
  submit(tx: $encodedTransaction) {
    id
  }
}

mutation startSession {
  startSession
}

mutation endSession($sessionId: ID!) {
  endSession(id: $sessionId)
}

mutation execute($sessionId: ID!, $op: String!) {
  execute(id: $sessionId, op: $op)
}

mutation reset($sessionId: ID!) {
  reset(id: $sessionId)
}

mutation produceBlocks($blocksToProduce: U64!, $time: TimeParameters) {
  produceBlocks(blocksToProduce: $blocksToProduce, time: $time)
}
